{"ast":null,"code":"var _jsxFileName = \"D:\\\\Incubator\\\\Lession_Week_TODO\\\\TodoGitHGub\\\\src\\\\App.tsx\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\n\nfunction App() {\n  let todolist1 = v1();\n  let todolist2 = v1();\n  let [tasks, setTasks] = useState({\n    [todolist1]: [{\n      id: v1(),\n      title: 'HTML&CSS',\n      isDone: true\n    }, {\n      id: v1(),\n      title: 'JS',\n      isDone: true\n    }],\n    [todolist2]: [{\n      id: v1(),\n      title: 'HTML&CSS',\n      isDone: true\n    }, {\n      id: v1(),\n      title: 'JS',\n      isDone: true\n    }]\n  });\n  /*   let [filter, setFilter] = useState<FilterValuesType>('all');*/\n\n  function removeTask(id, todoId) {\n    let todolistTask = tasks[todoId];\n    tasks[todoId] = todolistTask.filter(t => t.id != id);\n    setTasks({ ...tasks\n    });\n  }\n\n  function addTask(title, todoId) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    };\n    let newTasks = tasks[todoId];\n    tasks[todoId] = [task, ...newTasks];\n    setTasks({ ...tasks\n    });\n  }\n\n  function changeStatus(id, isDone, todoId) {\n    let todolistTask = tasks[todoId];\n    let task = todolistTask.find(t => t.id === id);\n\n    if (task) {\n      task.isDone = isDone;\n      setTasks({ ...tasks\n      });\n    }\n  }\n\n  function changeFilter(value, todoId) {\n    let todolist = todolists.find(t => t.id === todoId);\n\n    if (todolist) {\n      todolist.filter = value;\n      setTodolist([...todolists]);\n    }\n  }\n\n  function delTask(id) {\n    setTodolist(todolists.filter(t => t.id != id));\n    delete tasks[id];\n    setTasks({ ...tasks\n    });\n  }\n\n  const [todolists, setTodolist] = useState([{\n    id: todolist1,\n    title: 'New-Todo',\n    filter: 'all'\n  }, {\n    id: todolist2,\n    title: 'New-Todo',\n    filter: 'all'\n  }]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, todolists.map(t => {\n    let allTaskForTodoList = tasks[t.id];\n    let tasksForTodolist = allTaskForTodoList;\n\n    if (t.filter === 'active') {\n      tasksForTodolist = allTaskForTodoList.filter(t => t.isDone === false);\n    }\n\n    if (t.filter === 'completed') {\n      tasksForTodolist = allTaskForTodoList.filter(t => t.isDone === true);\n    }\n\n    return /*#__PURE__*/React.createElement(Todolist, {\n      delTask: delTask,\n      id: t.id,\n      key: t.id,\n      title: t.title,\n      tasks: tasksForTodolist,\n      removeTask: removeTask,\n      changeFilter: changeFilter,\n      addTask: addTask,\n      changeTaskStatus: changeStatus,\n      filter: t.filter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 28\n      }\n    });\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Incubator/Lession_Week_TODO/TodoGitHGub/src/App.tsx"],"names":["React","useState","Todolist","v1","App","todolist1","todolist2","tasks","setTasks","id","title","isDone","removeTask","todoId","todolistTask","filter","t","addTask","task","newTasks","changeStatus","find","changeFilter","value","todolist","todolists","setTodolist","delTask","map","allTaskForTodoList","tasksForTodolist"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\nimport { v1 } from 'uuid';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter:  FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n    let todolist1 = v1()\r\n    let todolist2 = v1()\r\n    let [tasks, setTasks] = useState({\r\n        [todolist1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true}\r\n    ],\r\n       [todolist2]: [\r\n           {id: v1(), title: 'HTML&CSS', isDone: true},\r\n           {id: v1(), title: 'JS', isDone: true}\r\n       ]\r\n})\r\n\r\n /*   let [filter, setFilter] = useState<FilterValuesType>('all');*/\r\n\r\n    function removeTask(id: string,todoId:string) {\r\n        let todolistTask= tasks[todoId]\r\n        tasks[todoId] = todolistTask.filter(t => t.id != id)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string,todoId:string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let newTasks = tasks[todoId]\r\n        tasks[todoId] = [task, ...newTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean,todoId:string) {\r\n        let todolistTask= tasks[todoId]\r\n        let task = todolistTask.find(t => t.id === id)\r\n        if(task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoId:string) {\r\n        let todolist = todolists.find(t => t.id === todoId)\r\n        if (todolist) {\r\n            todolist.filter = value\r\n            setTodolist([...todolists])\r\n        }\r\n\r\n    }\r\n    function delTask (id:string) {\r\n       setTodolist(todolists.filter(t => t.id != id))\r\n        delete tasks[id]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    const [todolists, setTodolist] = useState<TodoListType[]>([\r\n        {id: todolist1, title: 'New-Todo', filter: 'all'},\r\n        {id: todolist2, title: 'New-Todo', filter: 'all'}\r\n    ])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                todolists.map(t => {\r\n                    let allTaskForTodoList = tasks[t.id]\r\n                    let tasksForTodolist = allTaskForTodoList;\r\n                    if (t.filter === 'active') {\r\n                        tasksForTodolist = allTaskForTodoList.filter(t => t.isDone === false);\r\n                    }\r\n                    if (t.filter === 'completed') {\r\n                        tasksForTodolist = allTaskForTodoList.filter(t => t.isDone === true);\r\n                    }\r\n                    return <Todolist\r\n                        delTask={delTask}\r\n                        id={t.id}\r\n                        key={t.id}\r\n                        title={t.title}\r\n                        tasks={tasksForTodolist}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeStatus}\r\n                        filter={t.filter}/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}