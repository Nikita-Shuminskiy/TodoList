{"ast":null,"code":"var _jsxFileName = \"D:\\\\Incubator\\\\Lession_Week_TODO\\\\TodoGitHGub\\\\src\\\\App.tsx\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\n\nfunction App() {\n  let [tasks, setTasks] = useState([{\n    id: v1(),\n    title: 'HTML&CSS',\n    isDone: true\n  }, {\n    id: v1(),\n    title: 'JS',\n    isDone: true\n  }, {\n    id: v1(),\n    title: 'ReactJS',\n    isDone: false\n  }, {\n    id: v1(),\n    title: 'Rest API',\n    isDone: false\n  }, {\n    id: v1(),\n    title: 'GraphQL',\n    isDone: false\n  }]);\n  let [filter, setFilter] = useState('all');\n\n  function removeTask(id) {\n    let filteredTasks = tasks.filter(t => t.id != id);\n    setTasks(filteredTasks);\n  }\n\n  function addTask(title) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    };\n    let newTasks = [task, ...tasks];\n    setTasks(newTasks);\n  }\n\n  function changeStatus(taskId, isDone) {\n    let task = tasks.find(t => t.id === taskId);\n\n    if (task) {\n      task.isDone = isDone;\n    }\n\n    setTasks([...tasks]);\n  }\n\n  function changeFilter(value) {\n    setFilter(value);\n  }\n\n  const [todolist, setTodolist] = useState([{\n    id: v1(),\n    title: 'New-Todo',\n    filter: 'all'\n  }, {\n    id: v1(),\n    title: 'New-Todo',\n    filter: 'all'\n  }]);\n  {\n    let tasksForTodolist = tasks;\n\n    if (filter === 'active') {\n      tasksForTodolist = tasks.filter(t => t.isDone === false);\n    }\n\n    if (filter === 'completed') {\n      tasksForTodolist = tasks.filter(t => t.isDone === true);\n    }\n\n    todolist.map(t => {\n      return /*#__PURE__*/React.createElement(Todolist, {\n        key: t.id,\n        title: t.title,\n        tasks: tasksForTodolist,\n        removeTask: removeTask,\n        changeFilter: changeFilter,\n        addTask: addTask,\n        changeTaskStatus: changeStatus,\n        filter: t.filter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, todolist, todolist);\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Incubator/Lession_Week_TODO/TodoGitHGub/src/App.tsx"],"names":["React","useState","Todolist","v1","App","tasks","setTasks","id","title","isDone","filter","setFilter","removeTask","filteredTasks","t","addTask","task","newTasks","changeStatus","taskId","find","changeFilter","value","todolist","setTodolist","tasksForTodolist","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\nimport { v1 } from 'uuid';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n    let [tasks, setTasks] = useState([\r\n        {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        {id: v1(), title: 'JS', isDone: true},\r\n        {id: v1(), title: 'ReactJS', isDone: false},\r\n        {id: v1(), title: 'Rest API', isDone: false},\r\n        {id: v1(), title: 'GraphQL', isDone: false},\r\n    ]);\r\n    let [filter, setFilter] = useState<FilterValuesType>('all');\r\n\r\n\r\n    function removeTask(id: string) {\r\n        let filteredTasks = tasks.filter(t => t.id != id);\r\n        setTasks(filteredTasks);\r\n    }\r\n\r\n    function addTask(title: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let newTasks = [task, ...tasks];\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean) {\r\n        let task = tasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n        }\r\n\r\n        setTasks([...tasks]);\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType) {\r\n        setFilter(value);\r\n    }\r\n\r\n    const [todolist, setTodolist] = useState<TodoListType[]>([\r\n        {id: v1(), title: 'New-Todo', filter: 'all'},\r\n        {id: v1(), title: 'New-Todo', filter: 'all'}\r\n    ])\r\n\r\n    {\r\n        let tasksForTodolist = tasks;\r\n        if (filter === 'active') {\r\n            tasksForTodolist = tasks.filter(t => t.isDone === false);\r\n        }\r\n        if (filter === 'completed') {\r\n            tasksForTodolist = tasks.filter(t => t.isDone === true);\r\n        }\r\n        todolist.map(t => {\r\n            return <Todolist\r\n                key={t.id}\r\n                title={t.title}\r\n                tasks={tasksForTodolist}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeStatus}\r\n                filter={t.filter}/>\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            {todolist}\r\n            {todolist}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}