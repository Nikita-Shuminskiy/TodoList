{"ast":null,"code":"var _jsxFileName = \"D:\\\\Incubator\\\\Lession_Week_TODO\\\\Tuesday\\\\less_5\\\\src\\\\App.tsx\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\n\nfunction App() {\n  let [tasks, setTasks] = useState([{\n    id: v1(),\n    title: 'HTML&CSS',\n    isDone: true\n  }, {\n    id: v1(),\n    title: 'JS',\n    isDone: true\n  }, {\n    id: v1(),\n    title: 'ReactJS',\n    isDone: false\n  }, {\n    id: v1(),\n    title: 'Rest API',\n    isDone: false\n  }, {\n    id: v1(),\n    title: 'GraphQL',\n    isDone: false\n  }]);\n\n  function removeTask(id) {\n    let filteredTasks = tasks.filter(t => t.id != id);\n    setTasks(filteredTasks);\n  }\n\n  function addTask(title) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    };\n    let newTasks = [task, ...tasks];\n    setTasks(newTasks);\n  }\n\n  function changeStatus(taskId, isDone) {\n    let task = tasks.find(t => t.id === taskId);\n\n    if (task) {\n      task.isDone = isDone;\n    }\n\n    setTasks([...tasks]);\n  }\n\n  function changeFilter(value, idTODO) {}\n  /*let [filter, setFilter] = useState<FilterValuesType>('all');*/\n\n\n  const tasksTodoID = [{\n    id: v1(),\n    title: 'Hello Task 1',\n    filter: 'all'\n  }, {\n    id: v1(),\n    title: 'Hello task 2',\n    filter: 'completed'\n  }];\n  tasksTodoID.map(todo => {\n    let tasksForTodolist = tasks;\n\n    if (todo.filter === 'active') {\n      tasksForTodolist = tasks.filter(t => t.isDone === false);\n    }\n\n    if (todo.filter === 'completed') {\n      tasksForTodolist = tasks.filter(t => t.isDone === true);\n    }\n\n    return /*#__PURE__*/React.createElement(Todolist, {\n      key: todo.id,\n      title: todo.title,\n      tasks: tasksForTodolist,\n      removeTask: removeTask,\n      changeFilter: changeFilter,\n      addTask: addTask,\n      changeTaskStatus: changeStatus,\n      filter: todo.filter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Incubator/Lession_Week_TODO/Tuesday/less_5/src/App.tsx"],"names":["React","useState","Todolist","v1","App","tasks","setTasks","id","title","isDone","removeTask","filteredTasks","filter","t","addTask","task","newTasks","changeStatus","taskId","find","changeFilter","value","idTODO","tasksTodoID","map","todo","tasksForTodolist"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\nimport { v1 } from 'uuid';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListType = {\r\n    id:string\r\n    title:string\r\n    filter:string\r\n}\r\n\r\nfunction App() {\r\n\r\n    let [tasks, setTasks] = useState([\r\n        {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        {id: v1(), title: 'JS', isDone: true},\r\n        {id: v1(), title: 'ReactJS', isDone: false},\r\n        {id: v1(), title: 'Rest API', isDone: false},\r\n        {id: v1(), title: 'GraphQL', isDone: false},\r\n    ]);\r\n\r\n\r\n\r\n    function removeTask(id: string) {\r\n        let filteredTasks = tasks.filter(t => t.id != id);\r\n        setTasks(filteredTasks);\r\n    }\r\n\r\n    function addTask(title: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let newTasks = [task, ...tasks];\r\n        setTasks(newTasks);\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean) {\r\n        let task = tasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n        }\r\n\r\n        setTasks([...tasks]);\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, idTODO:string) {\r\n      \r\n    }\r\n    /*let [filter, setFilter] = useState<FilterValuesType>('all');*/\r\n\r\n    const tasksTodoID: TodoListType[] = [\r\n        {id: v1(), title: 'Hello Task 1', filter: 'all'},\r\n        {id: v1(), title: 'Hello task 2', filter: 'completed'},\r\n    ]\r\n    tasksTodoID.map(todo => {\r\n        let tasksForTodolist = tasks;\r\n        if (todo.filter === 'active') {\r\n            tasksForTodolist = tasks.filter(t => t.isDone === false);\r\n        }\r\n        if (todo.filter === 'completed') {\r\n            tasksForTodolist = tasks.filter(t => t.isDone === true);\r\n        }\r\n        return (\r\n            <Todolist\r\n                key={todo.id}\r\n                title={todo.title}\r\n                tasks={tasksForTodolist}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeStatus}\r\n                filter={todo.filter}\r\n            />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}