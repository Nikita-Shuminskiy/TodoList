{"ast":null,"code":"var _jsxFileName = \"D:\\\\Incubator\\\\Lession_Week_TODO\\\\TodoGitHGub\\\\src\\\\App.tsx\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Todolist } from './Todolist';\nimport { v1 } from 'uuid';\n\nfunction App() {\n  function removeTask(id, todoID) {\n    const tasksAl = tasksAll[todoID];\n    const filteredTask = tasksAl.filter(f => f.id !== id);\n    tasksAll[todoID] = filteredTask;\n    setAllTasks({ ...tasksAll\n    });\n  }\n\n  function addTask(title, todoID) {\n    let task = {\n      id: v1(),\n      title: title,\n      isDone: false\n    };\n    let todoTask = task[todoID];\n    task[todolistId] = todoTask;\n  }\n\n  function changeStatus(taskId, isDone, todoID) {\n    let tasks = tasksAll[todoID];\n    let task = tasks.find(t => t.id === taskId);\n\n    if (task) {\n      task.isDone = isDone;\n      setAllTasks({ ...tasksAll\n      });\n    }\n  }\n\n  function changeFilter(value, idTODO) {\n    const todolist = tasksTodoID.find(todo => todo.id === idTODO);\n\n    if (todolist) {\n      todolist.filter = value;\n      setTodoId([...tasksTodoID]);\n    }\n  }\n\n  function todolistRemoveTasks(todoID) {\n    let tasksAl = tasksTodoID;\n    let filteredTask = tasksAl.filter(f => f.id !== todoID);\n    tasksAl = filteredTask;\n    setTodoId(tasksAl);\n  }\n  /*let [filter, setFilter] = useState<FilterValuesType>('all');*/\n\n\n  const todoListId1 = v1();\n  const todoListId2 = v1();\n  const [tasksTodoID, setTodoId] = useState([{\n    id: todoListId1,\n    title: 'Hello Task 1',\n    filter: 'all'\n  }, {\n    id: todoListId2,\n    title: 'Hello task 2',\n    filter: 'completed'\n  }]);\n  const [tasksAll, setAllTasks] = useState({\n    [todoListId1]: [{\n      id: v1(),\n      title: 'HTML&CSS',\n      isDone: true\n    }, {\n      id: v1(),\n      title: 'JS',\n      isDone: true\n    }, {\n      id: v1(),\n      title: 'ReactJS',\n      isDone: false\n    }, {\n      id: v1(),\n      title: 'Rest API',\n      isDone: false\n    }, {\n      id: v1(),\n      title: 'GraphQL',\n      isDone: false\n    }],\n    [todoListId2]: [{\n      id: v1(),\n      title: 'HTML&CSS',\n      isDone: true\n    }, {\n      id: v1(),\n      title: 'JS',\n      isDone: true\n    }, {\n      id: v1(),\n      title: 'ReactJS',\n      isDone: false\n    }, {\n      id: v1(),\n      title: 'Rest API',\n      isDone: false\n    }, {\n      id: v1(),\n      title: 'GraphQL',\n      isDone: false\n    }]\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, tasksTodoID.map(todo => {\n    let tasksForTodolist = tasksAll[todo.id];\n\n    if (todo.filter === 'active') {\n      tasksForTodolist = tasksAll[todo.id].filter(t => t.isDone === false);\n    }\n\n    if (todo.filter === 'completed') {\n      tasksForTodolist = tasksAll[todo.id].filter(t => t.isDone === true);\n    }\n\n    return /*#__PURE__*/React.createElement(Todolist, {\n      idTodo: todo.id,\n      key: todo.id,\n      title: todo.title,\n      tasks: tasksForTodolist,\n      removeTask: removeTask,\n      changeFilter: changeFilter,\n      addTask: addTask,\n      changeTaskStatus: changeStatus,\n      filter: todo.filter,\n      todolistRemoveTasks: todolistRemoveTasks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    });\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Incubator/Lession_Week_TODO/TodoGitHGub/src/App.tsx"],"names":["React","useState","Todolist","v1","App","removeTask","id","todoID","tasksAl","tasksAll","filteredTask","filter","f","setAllTasks","addTask","title","task","isDone","todoTask","todolistId","changeStatus","taskId","tasks","find","t","changeFilter","value","idTODO","todolist","tasksTodoID","todo","setTodoId","todolistRemoveTasks","todoListId1","todoListId2","map","tasksForTodolist"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Todolist } from './Todolist';\r\nimport { v1 } from 'uuid';\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListType = {\r\n    id:string\r\n    title:string\r\n    filter:FilterValuesType\r\n}\r\n\r\nfunction App() {\r\n\r\n\r\n    function removeTask(id: string , todoID:string) {\r\n        const tasksAl = tasksAll[todoID]\r\n        const filteredTask = tasksAl.filter(f => f.id !== id)\r\n        tasksAll[todoID] = filteredTask\r\n        setAllTasks({...tasksAll})\r\n    }\r\n\r\n    function addTask(title: string,todoID:string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n        let todoTask = task[todoID]\r\n        task[todolistId] = todoTask\r\n    }\r\n    function changeStatus(taskId: string, isDone: boolean,todoID:string) {\r\n        let tasks = tasksAll[todoID]\r\n        let task = tasks.find(t => t.id === taskId);\r\n        if (task) {\r\n            task.isDone = isDone;\r\n\r\n            setAllTasks({...tasksAll})\r\n        }\r\n\r\n    }\r\n    function changeFilter(value: FilterValuesType, idTODO:string) {\r\n        const todolist = tasksTodoID.find(todo => todo.id === idTODO)\r\n            if (todolist){\r\n                todolist.filter = value\r\n                setTodoId([...tasksTodoID])\r\n            }\r\n    }\r\n    function todolistRemoveTasks  (todoID:string)  {\r\n        let tasksAl = tasksTodoID\r\n        let filteredTask = tasksAl.filter(f => f.id !== todoID)\r\n        tasksAl = filteredTask\r\n        setTodoId(tasksAl)\r\n\r\n\r\n    }\r\n    /*let [filter, setFilter] = useState<FilterValuesType>('all');*/\r\n    const todoListId1 = v1()\r\n    const todoListId2 = v1()\r\n    const [tasksTodoID, setTodoId] = useState<TodoListType[]>( [\r\n        {id: todoListId1, title: 'Hello Task 1', filter: 'all'},\r\n        {id: todoListId2, title: 'Hello task 2', filter: 'completed'},\r\n    ])\r\n\r\n    const [tasksAll,setAllTasks] = useState( {\r\n        [todoListId1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: false},\r\n            {id: v1(), title: 'GraphQL', isDone: false},\r\n        ],\r\n        [todoListId2]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'ReactJS', isDone: false},\r\n            {id: v1(), title: 'Rest API', isDone: false},\r\n            {id: v1(), title: 'GraphQL', isDone: false},\r\n        ]\r\n    })\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n                tasksTodoID.map(todo => {\r\n                    let tasksForTodolist = tasksAll[todo.id]\r\n                    if (todo.filter === 'active') {\r\n                        tasksForTodolist = tasksAll[todo.id].filter(t => t.isDone === false);\r\n                    }\r\n                    if (todo.filter === 'completed') {\r\n                        tasksForTodolist = tasksAll[todo.id].filter(t => t.isDone === true);\r\n                    }\r\n                    return (\r\n                        <Todolist\r\n                            idTodo={todo.id}\r\n                            key={todo.id}\r\n                            title={todo.title}\r\n                            tasks={tasksForTodolist}\r\n                            removeTask={removeTask}\r\n                            changeFilter={changeFilter}\r\n                            addTask={addTask}\r\n                            changeTaskStatus={changeStatus}\r\n                            filter={todo.filter}\r\n                            todolistRemoveTasks={todolistRemoveTasks}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}