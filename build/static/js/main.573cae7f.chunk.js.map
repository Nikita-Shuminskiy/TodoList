{"version":3,"sources":["serviceWorker.ts","Api/TodoListsApi.ts","Components/AddItemForm/AddTodoListForm.tsx","Components/EditSpan/EditSpan.tsx","Pages/Tasks/Tasks.tsx","State/App-reducer.ts","Utils/Error-utils.ts","State/task-reducer.ts","Pages/TodoList/Todolist.tsx","State/todoList-reducer.ts","Pages/TodoListsList/TodoListsList.tsx","Components/ErrorSnackBar/ErrorSnackBar.tsx","App/App.tsx","Store/Store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddTodoListForm","React","memo","addItem","entityStatus","useState","title","setTitle","error","setError","addTask","trim","style","marginTop","marginBottom","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","variant","helperText","label","size","disabled","IconButton","onClick","color","AddBox","fontSize","instance","axios","create","baseURL","withCredentials","headers","todoListsApi","get","todoId","delete","id","put","post","todolistId","taskId","properties","EditSpan","props","console","log","editMode","setEditMode","spanStrikeout","statuses","Completed","autoFocus","onBlur","className","onDoubleClick","Tasks","removeTask","changeTaskStatus","changeTaskValueNew","titleEditInput","status","onChangeHandlerWrapper","useCallback","newStatusValue","checked","New","onChangeInputValueWrapper","valueNew","removeTaskWrapper","Checkbox","Delete","initialState","setAppStatus","type","setAppError","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","model","updateTaskAC","catch","err","warn","Todolist","useDispatch","useEffect","idTodoList","items","setTasksAC","changeTitleValueNewWrapper","newTitle","changeTitleTodoList","onAllClickHandlerWrapper","changeFilterTasks","onActiveClickHandlerWrapper","onCompletedClickHandlerWrapper","addTaskWrapper","deleteTodoListWrapper","delTodolist","tasksForTodolist","filter","titleTodoList","listStyle","map","key","Button","backgroundColor","TodoListsList","todolists","useSelector","state","action","idTodo","item","rej","addTaskThunk","changeStatus","changeFilter","changeTodoListFilterAC","daleteTodolistAC","addTodoList","todoList","addTodoListThunk","updateTodoListTitleAC","updateTodoListTitleThunk","Grid","container","padding","spacing","todo","allTaskForTodoList","Paper","elevation","Alert","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","background","position","Toolbar","display","justifyContent","edge","aria-label","MenuOpen","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","stateCopy","f","todoListId","reduce","acc","cur","tl","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.573cae7f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '978dde1d-b974-4ee1-a942-d32857675e96'\r\n    }\r\n})\r\n\r\n//api\r\nexport const todoListsApi = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    delTodoLists(todoId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoId}`)\r\n    },\r\n    updTodoLists(title: string, id: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title})\r\n    },\r\n    createTodoLists(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    getTasks(todolistId:string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(title:string,todolistId:string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title:title})\r\n    },\r\n    updateTask(taskId:string, properties:UpdateTaskModelType, todolistId:string) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, properties) // {properties} не ставить на обновление!!\r\n    },\r\n    deleteTask(id: string, todoId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoId}/tasks/${id}`)\r\n    },\r\n\r\n\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, { ChangeEvent, useState, KeyboardEvent, useCallback } from 'react';\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport '../../App/App.css';\r\nimport { AddBox } from '@material-ui/icons';\r\nimport { RequestStatusType } from '../../State/App-reducer';\r\n\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title:string) => void\r\n    entityStatus?:RequestStatusType\r\n}\r\n\r\nexport const AddTodoListForm = React.memo(function({addItem,entityStatus}: AddItemFormType) {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const textError = 'Title is required'\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError(textError);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    return (\r\n        <div style={{ marginTop:'20px',marginBottom: '17px' }}>\r\n            <TextField\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                variant={'outlined'}\r\n                helperText={error}\r\n                label={'Title'}\r\n                size={'small'}\r\n                error={!!error}\r\n                disabled={entityStatus === 'loading'}\r\n            />\r\n            <IconButton\r\n                disabled={entityStatus === 'loading'}\r\n                onClick={addTask}\r\n                color={'primary'}\r\n                size={'small'}>\r\n                <AddBox fontSize={'large'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n\r\n})","import React, { ChangeEvent, useState } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\nimport { TaskStatuses } from '../../Api/TodoListsApi';\r\n\r\ntype EditInputType = {\r\n    title: string\r\n    onChange:(value:string) => void\r\n    statuses?:TaskStatuses\r\n}\r\nexport const EditSpan = React.memo((props: EditInputType) => {\r\n    console.log('edit-input')\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const spanStrikeout = props.statuses === TaskStatuses.Completed ? 'span-strikeout': ''\r\n\r\n    const onEditSpan = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const offEditSpan =  () =>{\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode ? <TextField color={'primary'} size={'small'} autoFocus={true} onBlur={offEditSpan} onChange={onChangeHandler} value={title}/> :\r\n        <span className={spanStrikeout} onDoubleClick={onEditSpan}>{props.title}</span>\r\n})","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { Checkbox, IconButton } from '@material-ui/core';\r\nimport { EditSpan } from '../../Components/EditSpan/EditSpan';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { TaskStatuses } from '../../Api/TodoListsApi';\r\n\r\n\r\nexport type TasksComponentType = {\r\n    todoId: string\r\n    taskId: string\r\n    removeTask: (taskId: string, todoId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoId: string) => void\r\n    changeTaskValueNew: (taskId: string, valueNew: string, todoId: string) => void\r\n    titleEditInput: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport const Tasks = React.memo(({\r\n                                     todoId,\r\n                                     taskId,\r\n                                     removeTask,\r\n                                     changeTaskStatus,\r\n                                     changeTaskValueNew,\r\n                                     titleEditInput,\r\n                                     status\r\n                                 }: TasksComponentType) => {\r\n\r\n    const onChangeHandlerWrapper = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const newStatusValue = e.currentTarget.checked\r\n        changeTaskStatus(taskId, newStatusValue ? TaskStatuses.Completed : TaskStatuses.New, todoId)\r\n    }, [changeTaskStatus, taskId, todoId])\r\n\r\n    const onChangeInputValueWrapper = useCallback(function (valueNew: string) {\r\n        changeTaskValueNew(taskId, valueNew, todoId)\r\n    }, [changeTaskValueNew, taskId, todoId])\r\n\r\n    const removeTaskWrapper = useCallback(() => removeTask(taskId, todoId), [removeTask, taskId, todoId])\r\n\r\n    return <>\r\n        <li >\r\n            <Checkbox\r\n                className={status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                checked={status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandlerWrapper}\r\n            />\r\n            <EditSpan  statuses={status} title={titleEditInput} onChange={onChangeInputValueWrapper}/>\r\n            <IconButton onClick={removeTaskWrapper} size={'small'}>\r\n                <Delete fontSize={'medium'}/>\r\n            </IconButton>\r\n        </li>\r\n    </>\r\n\r\n})","import { ActionType } from '../Store/Store';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return { ...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAppStatus = (status: RequestStatusType) => ({type:'APP/SET-STATUS', status} as const)\r\n\r\nexport const setAppError = (error: string | null) => ({type:'APP/SET-ERROR', error} as const)","import { ResponseType } from '../Api/TodoListsApi';\r\nimport { setAppError, setAppStatus } from '../State/App-reducer';\r\nimport { AppDispatchType } from '../Store/Store';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: AppDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppError('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: AppDispatchType) => {\r\n    dispatch(setAppError(error.message))\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\n","import { ActionType, AppDispatchType, AppRootStateType } from '../Store/Store';\r\nimport { setAppError, setAppStatus } from './App-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../Utils/Error-utils';\r\nimport { TaskPriorities, TaskStatuses, TaskType, todoListsApi, UpdateTaskModelType } from '../Api/TodoListsApi';\r\n\r\n\r\nconst initialState: TodoTaskType = {}\r\n\r\nexport const taskReducer = (state = initialState, action: ActionType): TodoTaskType => {\r\n    const stateCopy = {...state}\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.idTodo]: state[action.idTodo].filter(f => f.id !== action.id)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoId]: state[action.todoId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoList.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.reduce((acc, cur) => {\r\n                stateCopy[cur.id] = []\r\n                return stateCopy\r\n            }, {...state})\r\n        /*action.todolists.forEach((tl) => {\r\n            stateCopy[tl.id] = []\r\n        })\r\n        return stateCopy;*/\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\nexport const removeTaskAC = (id: string, idTodo: string) => ({type: 'REMOVE-TASK', idTodo, id} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoId: string) =>\r\n    ({type: 'UPDATE-TASK', taskId, model, todoId} as const)\r\n\r\n\r\n//thunk\r\nexport const fetchTasksThunk = (todolistId: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.getTasks(todolistId)\r\n            .then((res) => {\r\n                if (res.data.items) {\r\n                    dispatch(setTasksAC(res.data.items, todolistId))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else if (res.data.error.length) {\r\n                    dispatch(setAppError(res.data.error[0]))\r\n                } else {\r\n                    dispatch(setAppError('Some error occurred'))\r\n                }\r\n                dispatch(setAppStatus('failed'))\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.error, dispatch)\r\n        })\r\n    }\r\nexport const removeTaskThunk = (taskId: string, todolistId: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.deleteTask(taskId, todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTaskAC(taskId, todolistId))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\nexport const addTaskThunk = (title: string, todoId: string) =>\r\n    (dispatch: AppDispatchType, getState: AppRootStateType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.createTask(title, todoId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(rej => {\r\n            handleServerNetworkError(rej.messages, dispatch)\r\n        })\r\n    }\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: AppDispatchType, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        dispatch(setAppStatus('loading'))\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n           /* ...domainModel*/\r\n        }\r\n        todoListsApi.updateTask(taskId, apiModel, todolistId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\n\r\n\r\n//types\r\nexport type TodoTaskType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { AddTodoListForm } from '../../Components/AddItemForm/AddTodoListForm';\r\nimport { EditSpan } from '../../Components/EditSpan/EditSpan';\r\nimport { Button, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { Tasks } from '../Tasks/Tasks';\r\nimport { FilterValuesType } from '../../State/todoList-reducer';\r\nimport { fetchTasksThunk } from '../../State/task-reducer';\r\nimport { useDispatch } from 'react-redux';\r\nimport { RequestStatusType } from '../../State/App-reducer';\r\nimport { TaskStatuses, TaskType } from '../../Api/TodoListsApi';\r\n\r\ntype PropsTodoType = {\r\n    titleTodoList: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoId: string) => void\r\n    changeFilterTasks: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todoId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoId: string) => void\r\n    changeTaskValueNew: (taskId: string, valueNew: string, todoId: string) => void\r\n    filter: FilterValuesType\r\n    idTodoList: string\r\n    delTodolist: (id: string) => void\r\n    changeTitleTodoList: (newTitle: string, id: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsTodoType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksThunk(props.idTodoList))\r\n    }, [dispatch, props.idTodoList])\r\n    const changeTitleValueNewWrapper = useCallback((newTitle: string) => {\r\n        props.changeTitleTodoList(newTitle, props.idTodoList)\r\n    }, [])\r\n\r\n    const onAllClickHandlerWrapper = useCallback(() => props.changeFilterTasks(props.idTodoList, 'all'), [props.changeFilterTasks, props.idTodoList])\r\n\r\n    const onActiveClickHandlerWrapper = useCallback(() => props.changeFilterTasks(props.idTodoList, 'active'), [props.changeFilterTasks, props.idTodoList])\r\n\r\n    const onCompletedClickHandlerWrapper = useCallback(() => props.changeFilterTasks(props.idTodoList, 'completed'), [props.changeFilterTasks, props.idTodoList])\r\n\r\n    const addTaskWrapper = useCallback((title: string) => {\r\n        props.addTask(title, props.idTodoList)\r\n    }, [props.addTask, props.idTodoList])\r\n\r\n    const deleteTodoListWrapper = useCallback(() => {\r\n        props.delTodolist(props.idTodoList)\r\n    }, [props.delTodolist, props.idTodoList])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <IconButton disabled={props.entityStatus === 'loading'} onClick={deleteTodoListWrapper}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <EditSpan title={props.titleTodoList} onChange={changeTitleValueNewWrapper}/>\r\n        </h3>\r\n        <AddTodoListForm entityStatus={props.entityStatus} addItem={addTaskWrapper}/>\r\n        <ul style={{listStyle: 'none'}}>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <div key={t.id}>\r\n                        <Tasks removeTask={props.removeTask} todoId={props.idTodoList}\r\n                               changeTaskStatus={props.changeTaskStatus}\r\n                               changeTaskValueNew={props.changeTaskValueNew}\r\n                               titleEditInput={t.title}\r\n                               taskId={t.id}\r\n                               status={t.status}/>\r\n                    </div>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button\r\n                style={{backgroundColor: 'red'}}\r\n                size={'medium'}\r\n                variant={props.filter === 'all' ? 'outlined' : 'contained'}\r\n                onClick={onAllClickHandlerWrapper}>All</Button>\r\n            <Button\r\n                variant={props.filter === 'active' ? 'outlined' : 'contained'}\r\n                onClick={onActiveClickHandlerWrapper}>Active</Button>\r\n            <Button\r\n                variant={props.filter === 'completed' ? 'outlined' : 'contained'}\r\n                onClick={onCompletedClickHandlerWrapper}>Completed</Button>\r\n        </div>\r\n    </div>\r\n})\r\n","import { todoListsApi, TodolistType } from '../Api/TodoListsApi';\r\nimport { ActionType, AppDispatchType } from '../Store/Store';\r\nimport { RequestStatusType, setAppError, setAppStatus } from './App-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../Utils/Error-utils';\r\n\r\n\r\nlet initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todoListReducer = (state = initialState, action: ActionType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case  'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'FILTER-TODOLIST':\r\n            return state = state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map((t) => ({...t, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: 'all', entityStatus: 'loading'} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//action\r\nexport const changeTodolistEntityStatus = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\nexport const daleteTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todoList: TodolistType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const updateTodoListTitleAC = (title: string, id: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title,\r\n    id\r\n} as const)\r\nexport const changeTodoListFilterAC = (todolistId: string, filter: FilterValuesType) => ({\r\n    type: 'FILTER-TODOLIST',\r\n    todolistId,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n\r\n/// thunk\r\nexport const setTodoListsThunk = () =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.getTodolists()\r\n            .then((res) => {\r\n                if (res.data) {\r\n                    dispatch(setTodolistsAC(res.data))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    dispatch(setAppError('TodoList is not found'))\r\n                    dispatch(setAppStatus('failed'))\r\n                }\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\nexport const addTodoListThunk = (title: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.createTodoLists(title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\nexport const deleteTodoListThunk = (todoId: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(changeTodolistEntityStatus(todoId, 'loading'))\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.delTodoLists(todoId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(daleteTodolistAC(todoId))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\nexport const updateTodoListTitleThunk = (title: string, id: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.updTodoLists(title, id)\r\n            .then(res => {\r\n               if (res){\r\n                   dispatch(updateTodoListTitleAC(title, id))\r\n                   dispatch(setAppStatus('idle'))\r\n               }else {\r\n                   dispatch(setAppError('TodoList is not found'))\r\n                   dispatch(setAppStatus('failed'))\r\n               }\r\n            }).catch(() => {\r\n            handleServerNetworkError( { message: 'Error Net Work'},dispatch)\r\n        })\r\n    }\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import React, { useCallback, useEffect } from 'react';\r\nimport { Grid, Paper } from '@material-ui/core';\r\nimport { Todolist } from '../TodoList/Todolist';\r\nimport {\r\n    addTodoListThunk,\r\n    changeTodoListFilterAC,\r\n    deleteTodoListThunk,\r\n    FilterValuesType,\r\n    setTodoListsThunk,\r\n    TodoListDomainType,\r\n    updateTodoListTitleThunk\r\n} from '../../State/todoList-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../Store/Store';\r\nimport { addTaskThunk, removeTaskThunk, TodoTaskType, updateTaskTC } from '../../State/task-reducer';\r\nimport { AddTodoListForm } from '../../Components/AddItemForm/AddTodoListForm';\r\nimport { TaskStatuses } from '../../Api/TodoListsApi';\r\n\r\n\r\ntype TodoListsListType = {}\r\n\r\n\r\nexport const TodoListsList: React.FC<TodoListsListType> = (props) => {\r\n    const todolists = useSelector<AppRootStateType, TodoListDomainType[]>(state => state.todolists)\r\n\r\n    const tasks = useSelector<AppRootStateType, TodoTaskType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTodoListsThunk())\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todoId: string) {\r\n        const action = removeTaskThunk(id, todoId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todoId: string) {\r\n        const action = addTaskThunk(title, todoId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todoId: string) {\r\n        const action = updateTaskTC(id, {status:status}, todoId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskValueNew = useCallback(function (id: string, valueNew: string, todoId: string) {\r\n        const action = updateTaskTC(id, {title:valueNew}, todoId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (todolistId: string, value: FilterValuesType) {\r\n        const action = changeTodoListFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n/////////////////////////////////\r\n    const delTodolist = useCallback(function (id: string) {\r\n        const action = deleteTodoListThunk(id)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback(function (title: string) {\r\n        const action = addTodoListThunk(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTitleTodoList = useCallback(function (title: string, id: string) {\r\n        const action = updateTodoListTitleThunk(title, id)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px, 0'}}>\r\n            <AddTodoListForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(todo => {\r\n                    let allTaskForTodoList = tasks[todo.id]\r\n                    return (\r\n                            <Grid item key={todo.id}>\r\n                                <Paper style={{padding: '20px'}} elevation={5}>\r\n                                    <Todolist\r\n                                        entityStatus={todo.entityStatus}\r\n                                        changeTitleTodoList={changeTitleTodoList}\r\n                                        changeTaskValueNew={changeTaskValueNew}\r\n                                        delTodolist={delTodolist}\r\n                                        idTodoList={todo.id}\r\n                                        titleTodoList={todo.title}\r\n                                        tasks={allTaskForTodoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilterTasks={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={todo.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                    )\r\n                })}\r\n        </Grid>\r\n    </>\r\n};\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../Store/Store';\r\nimport { setAppError } from '../../State/App-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppError(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography } from '@material-ui/core'; // тянет всю библиотеку, разбить на ипорты!!!!\r\nimport { MenuOpen } from '@material-ui/icons';\r\nimport { TodoListsList } from '../Pages/TodoListsList/TodoListsList';\r\nimport { AppRootStateType } from '../Store/Store';\r\nimport { RequestStatusType } from '../State/App-reducer';\r\nimport { useSelector } from 'react-redux';\r\nimport { ErrorSnackbar } from '../Components/ErrorSnackBar/ErrorSnackBar';\r\n\r\n\r\n\r\n\r\nconst App = React.memo(function () {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar style={{background: '#3F5172', color: 'white'}} position=\"static\">\r\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    </IconButton>\r\n                    <MenuOpen/>\r\n                    <Typography variant=\"h6\">\r\n                        MY TODOLIST :)\r\n                    </Typography>\r\n                    <Button variant={'outlined'} color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color='secondary'/>}\r\n            <Container fixed>\r\n                <TodoListsList/>\r\n            </Container>\r\n        </div>\r\n\r\n    );\r\n})\r\n\r\nexport default App;\r\n","import { applyMiddleware, combineReducers, createStore, Dispatch } from 'redux';\r\nimport { addTaskAC, removeTaskAC, setTasksAC, taskReducer, updateTaskAC } from '../State/task-reducer';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistEntityStatus,\r\n    changeTodoListFilterAC,\r\n    daleteTodolistAC,\r\n    setTodolistsAC,\r\n    todoListReducer,\r\n    updateTodoListTitleAC\r\n} from '../State/todoList-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport { appReducer, setAppError, setAppStatus } from '../State/App-reducer';\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\n\r\n\r\nexport type ActionType =\r\n    | ReturnType<typeof daleteTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof updateTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof changeTodolistEntityStatus>\r\n    | ReturnType<typeof updateTaskAC>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todoListReducer,\r\n    app: appReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatchType = Dispatch<ActionType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App/App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './Store/Store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}