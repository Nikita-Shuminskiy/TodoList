{"version":3,"sources":["serviceWorker.ts","Api/TodoListsApi.ts","Components/AddItemForm/AddTodoListForm.tsx","Components/EditSpan/EditSpan.tsx","Pages/Tasks/Tasks.tsx","Utils/Error-utils.ts","State/authReducer.ts","State/App-reducer.ts","State/task-reducer.ts","Pages/TodoList/Todolist.tsx","State/todoList-reducer.ts","Pages/TodoListsList/TodoListsList.tsx","Components/ErrorSnackBar/ErrorSnackBar.tsx","Pages/Login/Login.tsx","App/App.tsx","Store/Store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddTodoListForm","React","memo","addItem","entityStatus","useState","title","setTitle","error","setError","addTask","trim","style","marginTop","marginBottom","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","variant","helperText","label","size","disabled","IconButton","onClick","color","AddBox","fontSize","instance","axios","create","baseURL","withCredentials","headers","todoListsApi","get","todoId","delete","id","put","post","todolistId","taskId","properties","authMeApi","dataLogin","EditSpan","props","console","log","editMode","setEditMode","spanStrikeout","statuses","Completed","autoFocus","onBlur","className","onDoubleClick","Tasks","removeTask","changeTaskStatus","changeTaskValueNew","titleEditInput","status","onChangeHandlerWrapper","useCallback","newStatusValue","checked","New","onChangeInputValueWrapper","valueNew","removeTaskWrapper","Checkbox","Delete","handleServerAppError","data","dispatch","messages","length","setAppError","setAppStatus","handleServerNetworkError","message","initialState","isLoggedIn","setIsLoggedInAC","type","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","model","updateTaskAC","catch","err","warn","Todolist","useDispatch","useEffect","idTodoList","items","setTasksAC","changeTitleValueNewWrapper","newTitle","changeTitleTodoList","onAllClickHandlerWrapper","changeFilterTasks","onActiveClickHandlerWrapper","onCompletedClickHandlerWrapper","addTaskWrapper","deleteTodoListWrapper","delTodolist","tasksForTodolist","filter","titleTodoList","listStyle","map","key","Button","backgroundColor","TodoListsList","todolists","useSelector","state","authReducer","alert","action","idTodo","item","rej","addTaskThunk","changeStatus","changeFilter","changeTodoListFilterAC","daleteTodolistAC","addTodoList","todoList","addTodoListThunk","updateTodoListTitleAC","updateTodoListTitleThunk","Grid","container","padding","spacing","todo","allTaskForTodoList","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","FormLabel","href","target","handleSubmit","FormControl","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","history","useHistory","finally","position","top","textAlign","width","CircularProgress","AppBar","background","Toolbar","display","justifyContent","edge","MenuOpen","Typography","push","LinearProgress","Container","fixed","exact","path","render","from","rootReducer","combineReducers","stateCopy","f","todoListId","reduce","acc","cur","tl","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCkDMC,EAMAC,E,6HC9DCC,EAAkBC,IAAMC,MAAK,SAAS,GAA0C,IAAzCC,EAAwC,EAAxCA,QAAQC,EAAgC,EAAhCA,aAExD,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAwB,MAAlD,mBAAOG,EAAP,KAAcC,EAAd,KAIMC,EAAU,WACS,KAAjBJ,EAAMK,QACNR,EAAQG,GACRC,EAAS,KAETE,EAPU,sBAsBlB,OACI,yBAAKG,MAAO,CAAEC,UAAU,OAAOC,aAAc,SACzC,kBAACC,EAAA,EAAD,CACIC,MAAOV,EACPW,SAfY,SAACC,GACrBX,EAASW,EAAEC,cAAcH,OACzBP,EAAS,KAcDW,WAXc,SAACF,GACvBT,EAAS,MACU,KAAfS,EAAEG,UACFX,KASIY,QAAS,WACTC,WAAYf,EACZgB,MAAO,QACPC,KAAM,QACNjB,QAASA,EACTkB,SAA2B,YAAjBtB,IAEd,kBAACuB,EAAA,EAAD,CACID,SAA2B,YAAjBtB,EACVwB,QAASlB,EACTmB,MAAO,UACPJ,KAAM,SACN,kBAACK,EAAA,EAAD,CAAQC,SAAU,e,QDtD5BC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EAAe,WAEpB,OAAON,EAASO,IAAyB,eAFpCD,EAAe,SAIXE,GACT,OAAOR,EAASS,OAAT,qBAA4CD,KAL9CF,EAAe,SAOXhC,EAAeoC,GACxB,OAAOV,EAASW,IAAT,qBAAyCD,GAAM,CAACpC,WARlDgC,EAAe,SAURhC,GACZ,OAAO0B,EAASY,KAA2C,aAAc,CAACtC,WAXrEgC,EAAe,SAafO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAdFP,EAAe,SAgBbhC,EAAauC,GACpB,OAAOb,EAASY,KAAT,qBAA4DC,EAA5D,UAAgF,CAACvC,MAAMA,KAjBzFgC,EAAe,SAmBbQ,EAAeC,EAAgCF,GACtD,OAAOb,EAASW,IAAT,qBAA2DE,EAA3D,kBAA+EC,GAAUC,IApB3FT,EAAe,SAsBbI,EAAYF,GACnB,OAAOR,EAASS,OAAT,qBAA4CD,EAA5C,kBAA4DE,KAG9DM,EAAY,SACfC,GACF,OAAOjB,EAASY,KAAoC,aAAcK,IAF7DD,EAAY,WAKjB,OAAOhB,EAASO,IAAyD,YALpES,EAAY,WAQjB,OAAOhB,EAASS,OAAqB,gB,SAsBjC3C,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KEjEL,IAAMmD,EAAWjD,IAAMC,MAAK,SAACiD,GAChCC,QAAQC,IAAI,cACZ,MAAgChD,oBAAS,GAAzC,mBAAOiD,EAAP,KAAiBC,EAAjB,KACA,EAA0BlD,mBAAS8C,EAAM7C,OAAzC,mBAAOA,EAAP,KAAcC,EAAd,KAEMiD,EAAgBL,EAAMM,WAAa3D,EAAa4D,UAAY,iBAAkB,GAcpF,OAAOJ,EAAW,kBAACvC,EAAA,EAAD,CAAWc,MAAO,UAAWJ,KAAM,QAASkC,WAAW,EAAMC,OAR1D,WACjBL,GAAY,GACZJ,EAAMlC,SAASX,IAMiFW,SAJ5E,SAACC,GACrBX,EAASW,EAAEC,cAAcH,QAGkGA,MAAOV,IAClI,0BAAMuD,UAAWL,EAAeM,cAbjB,WACfP,GAAY,GACZhD,EAAS4C,EAAM7C,SAW6C6C,EAAM7C,U,kBCZ7DyD,EAAQ9D,IAAMC,MAAK,YAQ4B,IAPvBsC,EAOsB,EAPtBA,OACAM,EAMsB,EANtBA,OACAkB,EAKsB,EALtBA,WACAC,EAIsB,EAJtBA,iBACAC,EAGsB,EAHtBA,mBACAC,EAEsB,EAFtBA,eACAC,EACsB,EADtBA,OAG3BC,EAAyBC,uBAAY,SAACpD,GACxC,IAAMqD,EAAiBrD,EAAEC,cAAcqD,QACvCP,EAAiBnB,EAAQyB,EAAiBzE,EAAa4D,UAAY5D,EAAa2E,IAAKjC,KACtF,CAACyB,EAAkBnB,EAAQN,IAExBkC,EAA4BJ,uBAAY,SAAUK,GACpDT,EAAmBpB,EAAQ6B,EAAUnC,KACtC,CAAC0B,EAAoBpB,EAAQN,IAE1BoC,EAAoBN,uBAAY,kBAAMN,EAAWlB,EAAQN,KAAS,CAACwB,EAAYlB,EAAQN,IAE7F,OAAO,oCACH,4BACI,kBAACqC,EAAA,EAAD,CACIhB,UAAWO,IAAWtE,EAAa4D,UAAY,UAAY,GAC3Dc,QAASJ,IAAWtE,EAAa4D,UACjC7B,MAAM,UACNZ,SAAUoD,IAEd,kBAACnB,EAAD,CAAWO,SAAUW,EAAQ9D,MAAO6D,EAAgBlD,SAAUyD,IAC9D,kBAAC/C,EAAA,EAAD,CAAYC,QAASgD,EAAmBnD,KAAM,SAC1C,kBAACqD,EAAA,EAAD,CAAQ/C,SAAU,iB,uBC3CrBgD,EAAuB,SAAIC,EAAuBC,GACvDD,EAAKE,SAASC,OACdF,EAASG,EAAYJ,EAAKE,SAAS,KAEnCD,EAASG,EAAY,wBAEzBH,EAASI,EAAa,YAGbC,EAA2B,SAAC9E,EAA0ByE,GAC/DA,EAASG,EAAY5E,EAAM+E,UAC3BN,EAASI,EAAa,YCXpBG,EAAe,CACjBC,YAAY,GAeHC,EAAkB,SAAC1E,GAAD,MAAqB,CAAC2E,KAAM,yBAA0B3E,UCd/EwE,EAAe,CACjBpB,OAAQ,UACR5D,MAAO,KACPoF,eAAe,GAmBNP,EAAe,SAACjB,GAAD,MAAgC,CAACuB,KAAK,iBAAkBvB,WAEvEgB,EAAc,SAAC5E,GAAD,MAA2B,CAACmF,KAAK,gBAAiBnF,UCzBvEgF,EAA6B,GAkGtBK,EAAe,SAAC/C,EAAgBgD,EAAwCjD,GAAzD,OACxB,SAACoC,EAA2Bc,GACxB,IACMC,EADQD,IACKE,MAAMpD,GAAYqD,MAAK,SAAAC,GAAC,OAAIA,EAAEzD,KAAOI,KACxD,GAAKkD,EAAL,CAKAf,EAASI,EAAa,YACtB,IAAMe,EAAgC,CAClCC,SAAUL,EAAKK,SACfC,YAAaN,EAAKM,YAClBC,SAAUP,EAAKO,SACfC,UAAWR,EAAKQ,UAChBlG,MAAO0F,EAAK1F,MACZ8D,OAAQ4B,EAAK5B,QAGjB9B,EAAwBQ,EAAQsD,EAAUvD,GACrC4D,MAAK,SAAAC,GAC0B,IAAxBA,EAAI1B,KAAK2B,YACT1B,EA5EQ,SAACnC,EAAgB8D,EAAkCpE,GAAnD,MACvB,CAACmD,KAAM,cAAe7C,SAAQ8D,QAAOpE,UA2EbqE,CAAa/D,EAAQgD,EAAajD,IAC3CoC,EAASI,EAAa,eAEtBN,EAAqB2B,EAAI1B,KAAMC,MAEpC6B,OAAM,SAAAC,GACTzB,EAAyByB,EAAI7B,SAAUD,WAtBvC7B,QAAQ4D,KAAK,iC,QCnFZC,GAAWhH,IAAMC,MAAK,SAAUiD,GAEzC,IAAM8B,EAAWiC,cACjBC,qBAAU,WDyBiB,IAACtE,ECxBxBoC,GDwBwBpC,ECxBCM,EAAMiE,WDyBnC,SAACnC,GACGA,EAASI,EAAa,YACtB/C,EAAsBO,GACjB4D,MAAK,SAACC,GACCA,EAAI1B,KAAKqC,OACTpC,EAhBM,SAACgB,EAAwBpD,GAAzB,MAAiD,CACvE8C,KAAM,YACNM,QACApD,cAayByE,CAAWZ,EAAI1B,KAAKqC,MAAOxE,IACpCoC,EAASI,EAAa,UACfqB,EAAI1B,KAAKxE,MAAM2E,OACtBF,EAASG,EAAYsB,EAAI1B,KAAKxE,MAAM,KAEpCyE,EAASG,EAAY,wBAEzBH,EAASI,EAAa,cACvByB,OAAM,SAAAC,GACTzB,EAAyByB,EAAIvG,MAAOyE,WCtCzC,CAACA,EAAU9B,EAAMiE,aACpB,IAAMG,EAA6BjD,uBAAY,SAACkD,GAC5CrE,EAAMsE,oBAAoBD,EAAUrE,EAAMiE,cAC3C,IAEGM,EAA2BpD,uBAAY,kBAAMnB,EAAMwE,kBAAkBxE,EAAMiE,WAAY,SAAQ,CAACjE,EAAMwE,kBAAmBxE,EAAMiE,aAE/HQ,EAA8BtD,uBAAY,kBAAMnB,EAAMwE,kBAAkBxE,EAAMiE,WAAY,YAAW,CAACjE,EAAMwE,kBAAmBxE,EAAMiE,aAErIS,EAAiCvD,uBAAY,kBAAMnB,EAAMwE,kBAAkBxE,EAAMiE,WAAY,eAAc,CAACjE,EAAMwE,kBAAmBxE,EAAMiE,aAE3IU,EAAiBxD,uBAAY,SAAChE,GAChC6C,EAAMzC,QAAQJ,EAAO6C,EAAMiE,cAC5B,CAACjE,EAAMzC,QAASyC,EAAMiE,aAEnBW,EAAwBzD,uBAAY,WACtCnB,EAAM6E,YAAY7E,EAAMiE,cACzB,CAACjE,EAAM6E,YAAa7E,EAAMiE,aAGzBa,EAAmB9E,EAAM8C,MAQ7B,MAPqB,WAAjB9C,EAAM+E,SACND,EAAmB9E,EAAM8C,MAAMiC,QAAO,SAAA/B,GAAC,OAAIA,EAAE/B,SAAWtE,EAAa2E,QAEpD,cAAjBtB,EAAM+E,SACND,EAAmB9E,EAAM8C,MAAMiC,QAAO,SAAA/B,GAAC,OAAIA,EAAE/B,SAAWtE,EAAa4D,cAGlE,6BACH,4BACI,kBAAC/B,EAAA,EAAD,CAAYD,SAAiC,YAAvByB,EAAM/C,aAA4BwB,QAASmG,GAC7D,kBAACjD,EAAA,EAAD,OAEJ,kBAAC5B,EAAD,CAAU5C,MAAO6C,EAAMgF,cAAelH,SAAUsG,KAEpD,kBAACvH,EAAD,CAAiBI,aAAc+C,EAAM/C,aAAcD,QAAS2H,IAC5D,wBAAIlH,MAAO,CAACwH,UAAW,SAEfH,EAAiBI,KAAI,SAAAlC,GACjB,OAAO,yBAAKmC,IAAKnC,EAAEzD,IACf,kBAACqB,EAAD,CAAOC,WAAYb,EAAMa,WAAYxB,OAAQW,EAAMiE,WAC5CnD,iBAAkBd,EAAMc,iBACxBC,mBAAoBf,EAAMe,mBAC1BC,eAAgBgC,EAAE7F,MAClBwC,OAAQqD,EAAEzD,GACV0B,OAAQ+B,EAAE/B,cAKjC,6BACI,kBAACmE,EAAA,EAAD,CACI3H,MAAO,CAAC4H,gBAAiB,OACzB/G,KAAM,SACNH,QAA0B,QAAjB6B,EAAM+E,OAAmB,WAAa,YAC/CtG,QAAS8F,GAJb,OAKA,kBAACa,EAAA,EAAD,CACIjH,QAA0B,WAAjB6B,EAAM+E,OAAsB,WAAa,YAClDtG,QAASgG,GAFb,UAGA,kBAACW,EAAA,EAAD,CACIjH,QAA0B,cAAjB6B,EAAM+E,OAAyB,WAAa,YACrDtG,QAASiG,GAFb,kBCrFRrC,GAA0C,G,SCmBjCiD,GAA6C,SAACtF,GACvD,IAAMuF,EAAYC,aAAoD,SAAAC,GAAK,OAAIA,EAAMF,aAE/EzC,EAAQ0C,aAA4C,SAAAC,GAAK,OAAIA,EAAM3C,SAEnER,EAAakD,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,YAAYpD,cAE/ER,EAAWiC,cAEjBC,qBAAU,WACD1B,GAGLR,GDaJ,SAACA,GACGA,EAASI,EAAa,YACtB/C,IACKmE,MAAK,SAACC,GACCA,EAAI1B,MACJC,EAV+C,CAACU,KAAM,gBAAiB+C,UAU/ChC,EAAI1B,OAC5BC,EAASI,EAAa,WAEtBJ,EAASG,EAAY,0BACrBH,EAASI,EAAa,eAE3ByB,OAAM,SAAAC,GAET+B,MAAM,uBACG7D,EAASG,EAAY,0BACtBH,EAASI,EAAa,mBC3BnC,CAACJ,IAEJ,IAAMjB,EAAaM,uBAAY,SAAU5B,EAAYF,GACjD,IH+BwBM,EAAgBD,EG/BlCkG,GH+BkBjG,EG/BOJ,EH+BSG,EG/BLL,EHgCvC,SAACyC,GACGA,EAASI,EAAa,YACtB/C,EAAwBQ,EAAQD,GAC3B4D,MAAK,SAACC,GACyB,IAAxBA,EAAI1B,KAAK2B,YACT1B,EApCyC,CAACU,KAAM,cAAeqD,OAoCjCnG,EApCyCH,GAoCjDI,IACtBmC,EAASI,EAAa,UAEtBN,EAAqB2B,EAAI1B,KAAMC,MAEpC6B,OAAM,SAAAC,GACTzB,EAAyByB,EAAI7B,SAAUD,QG1C3CA,EAAS8D,KACV,CAAC9D,IAEEvE,EAAU4D,uBAAY,SAAUhE,EAAekC,GACjD,IAAMuG,EHyCc,SAACzI,EAAekC,GAAhB,OACxB,SAACyC,EAA2Bc,GACxBd,EAASI,EAAa,YACtB/C,EAAwBhC,EAAOkC,GAC1BiE,MAAK,SAACC,GACyB,IAAxBA,EAAI1B,KAAK2B,YACT1B,EAlD0B,CAACU,KAAM,WAAYK,KAkD1BU,EAAI1B,KAAKA,KAAKiE,OACjChE,EAASI,EAAa,UAEtBN,EAAqB2B,EAAI1B,KAAMC,MAEpC6B,OAAM,SAAAoC,GACT5D,EAAyB4D,EAAIhE,SAAUD,OGrD5BkE,CAAa7I,EAAOkC,GACnCyC,EAAS8D,KACV,CAAC9D,IAEEmE,EAAe9E,uBAAY,SAAU5B,EAAY0B,EAAsB5B,GACzE,IAAMuG,EAASlD,EAAanD,EAAI,CAAC0B,OAAOA,GAAS5B,GACjDyC,EAAS8D,KACV,CAAC9D,IAEEf,EAAqBI,uBAAY,SAAU5B,EAAYiC,EAAkBnC,GAC3E,IAAMuG,EAASlD,EAAanD,EAAI,CAACpC,MAAMqE,GAAWnC,GAClDyC,EAAS8D,KACV,CAAC9D,IAEEoE,EAAe/E,uBAAY,SAAUzB,EAAoB7B,GAC3D,IAAM+H,EDrBwB,SAAClG,EAAoBqF,GAArB,MAAmD,CACrFvC,KAAM,kBACN9C,aACAqF,UCkBmBoB,CAAuBzG,EAAY7B,GAClDiE,EAAS8D,KACV,CAAC9D,IAGE+C,EAAc1D,uBAAY,SAAU5B,GACtC,IDmB4BF,ECnBtBuG,GDmBsBvG,ECnBOE,EDoBvC,SAACuC,GACGA,EA5DoF,CACxFU,KAAM,gCACNjD,GA0DwCF,EAzDxCpC,aAyDgD,YAC5C6E,EAASI,EAAa,YACtB/C,EAA0BE,GACrBiE,MAAK,SAAAC,GAC0B,IAAxBA,EAAI1B,KAAK2B,YACT1B,EA5DY,SAACvC,GAAD,MAAiB,CAACiD,KAAM,kBAAmBjD,MA4D9C6G,CAAiB/G,IAC1ByC,EAASI,EAAa,UAEtBN,EAAqB2B,EAAI1B,KAAMC,MAEpC6B,OAAM,SAAAC,GACTzB,EAAyByB,EAAI7B,SAAUD,QC/B3CA,EAAS8D,KACV,CAAC9D,IAEEuE,EAAclF,uBAAY,SAAUhE,GACtC,IAAMyI,EDHkB,SAACzI,GAAD,OAC5B,SAAC2E,GACGA,EAASI,EAAa,YACtB/C,EAA6BhC,GACxBmG,MAAK,SAAAC,GAC0B,IAAxBA,EAAI1B,KAAK2B,YACT1B,EAzCsC,CAACU,KAAM,eAAgB8D,SAyCtC/C,EAAI1B,KAAKA,KAAKiE,OACrChE,EAASI,EAAa,UAEtBN,EAAqB2B,EAAI1B,KAAMC,MAEpC6B,OAAM,SAAAC,GACL+B,MAAM,eACN7D,EAASI,EAAa,aCVfqE,CAAiBpJ,GAChC2E,EAAS8D,KACV,CAAC9D,IAEEwC,EAAsBnD,uBAAY,SAAUhE,EAAeoC,GAC7D,IAAMqG,EDyB0B,SAACzI,EAAeoC,GAAhB,OACpC,SAACuC,GACGA,EAASI,EAAa,YACtB/C,EAA0BhC,EAAOoC,GAC5B+D,MAAK,SAAAC,GACCA,GACAzB,EAzEkB,SAAC3E,EAAeoC,GAAhB,MAAgC,CACjEiD,KAAM,wBACNrF,QACAoC,MAsEwBiH,CAAsBrJ,EAAOoC,IACtCuC,EAASI,EAAa,WAEtBJ,EAASG,EAAY,0BACrBH,EAASI,EAAa,eAE1ByB,OAAM,WACTxB,EAA0B,CAAEC,QAAS,kBAAkBN,OCtC5C2E,CAAyBtJ,EAAOoC,GAC/CuC,EAAS8D,KACV,CAAC9D,IAEJ,OAAKQ,EAIE,oCACH,kBAACoE,EAAA,EAAD,CAAMC,WAAS,EAAClJ,MAAO,CAACmJ,QAAS,YAC7B,kBAAC/J,EAAD,CAAiBG,QAASqJ,KAE9B,kBAACK,EAAA,EAAD,CAAMC,WAAS,EAACE,QAAS,GAEjBtB,EAAUL,KAAI,SAAA4B,GACV,IAAIC,EAAqBjE,EAAMgE,EAAKvH,IACpC,OACQ,kBAACmH,EAAA,EAAD,CAAMZ,MAAI,EAACX,IAAK2B,EAAKvH,IACjB,kBAACyH,EAAA,EAAD,CAAOvJ,MAAO,CAACmJ,QAAS,QAASK,UAAW,GACxC,kBAACnD,GAAD,CACI7G,aAAc6J,EAAK7J,aACnBqH,oBAAqBA,EACrBvD,mBAAoBA,EACpB8D,YAAaA,EACbZ,WAAY6C,EAAKvH,GACjByF,cAAe8B,EAAK3J,MACpB2F,MAAOiE,EACPlG,WAAYA,EACZ2D,kBAAmB0B,EACnB3I,QAASA,EACTuD,iBAAkBmF,EAClBlB,OAAQ+B,EAAK/B,gBA1BtC,kBAAC,KAAD,CAAUmC,GAAI,Y,oBC5E7B,SAASC,GAAMnH,GACX,OAAO,kBAAC,KAAD,eAAUiH,UAAW,EAAG9I,QAAQ,UAAa6B,IAGjD,SAASoH,KACZ,IAAM/J,EAAQmI,aAA6C,SAAAC,GAAK,OAAIA,EAAM4B,IAAIhK,SACxEyE,EAAWiC,cAEXuD,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJ1F,EAASG,EAAY,QAGzB,OACI,kBAACwF,GAAA,EAAD,CAAUC,OAAQrK,EAAOsK,iBAAkB,IAAMC,QAASN,GACtD,kBAAC,GAAD,CAAOM,QAASN,EAAaO,SAAS,SACjCxK,I,qDCZJyK,GAAQ,WACjB,IAAMxF,EAAakD,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,YAAYpD,cAE/ER,EAAWiC,cAEXgE,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,GAShC,OARKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIhBI,EAAOH,SAASnG,OAAS,IACxBuG,EAAOJ,SAAW,uBAEfI,GAEXE,SAAU,SAAAH,GPZK,IAACzG,EOaZC,GPbYD,EOaKyG,EPZzB,SAACxG,GACGA,EAASI,EAAa,YACtBrC,EAAgBgC,GACXyB,MAAK,SAACC,GACyB,IAAxBA,EAAI1B,KAAK2B,YACT1B,EAASS,GAAgB,IACzBT,EAASI,EAAa,UAEtBN,EAAqB2B,EAAI1B,KAAMC,MAEpC6B,OAAM,SAAAoC,GACT5D,EAAyB4D,EAAIhE,SAAUD,SOEvCiG,EAAOW,eAIf,OAAGpG,EACQ,kBAAC,KAAD,CAAU4E,GAAI,MAGlB,kBAACR,EAAA,EAAD,CAAMC,WAAS,EAACgC,QAAQ,UAC3B,kBAACjC,EAAA,EAAD,CAAMZ,MAAI,EAAC8C,GAAI,GACX,kBAACC,GAAA,EAAD,KACI,sDACI,uBAAGC,KAAM,wCACNC,OAAQ,UADX,SAIJ,sEACA,wDACA,8CAEJ,0BAAMN,SAAUV,EAAOiB,cACvB,kBAACC,GAAA,EAAD,KACQ,kBAACC,GAAA,EAAD,KACI,kBAACtL,EAAA,EAAD,eACIS,MAAM,QACN8K,OAAO,UACHpB,EAAOqB,cAAc,WAG5BrB,EAAOQ,OAAOL,MAAS,iCAAOH,EAAOQ,OAAOL,OAAe,KAC5D,kBAACtK,EAAA,EAAD,eACIS,MAAM,WACN8K,OAAO,UACHpB,EAAOqB,cAAc,cAIzBrB,EAAOsB,QAAQnB,OACfH,EAAOQ,OAAOJ,SAAY,iCAAOJ,EAAOQ,OAAOJ,UAAkB,KAErE,kBAACmB,GAAA,EAAD,CACIjL,MAAO,cACPkL,QAAS,kBAAC7H,EAAA,EAAD,eACLL,QAAS0G,EAAOO,OAAOF,YACnBL,EAAOqB,cAAc,kBAGjC,kBAAChE,EAAA,EAAD,CAAQ5C,KAAM,SAAUrE,QAAS,YAAaO,MAAO,WAArD,eCNT8K,GAvDH1M,IAAMC,MAAK,WAGnB,IAAMkE,EAASuE,aAAiD,SAAAC,GAAK,OAAIA,EAAM4B,IAAIpG,UAC7EqB,EAAakD,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,YAAYpD,cAE/EG,EAAgB+C,aAAuC,SAAAC,GAAK,OAAIA,EAAM4B,IAAI5E,iBAC1EgH,EAAUC,eACV5H,EAAWiC,cAMjB,GAJAC,qBAAU,WACNlC,GPD6B,SAACA,GAClCjC,IAAeyD,MAAK,SAAAC,GACY,IAAxBA,EAAI1B,KAAK2B,YACT1B,EAASS,GAAgB,OAE9BoH,SAAQ,WACP7H,EARuD,CAACU,KAAK,sBAAuBC,eAQxD,YOJ9B,KAEGA,EACD,OAAO,yBAAKhF,MAAO,CAACmM,SAAU,QAASC,IAAK,MAAOC,UAAW,SAAUC,MAAO,SAC3E,kBAACC,EAAA,EAAD,OAUR,OAAO,yBAAKtJ,UAAU,OACd,kBAAC0G,GAAD,MACA,kBAAC6C,EAAA,EAAD,CAAQxM,MAAO,CAACyM,WAAY,UAAWxL,MAAO,SAAUkL,SAAS,UAC7D,kBAACO,EAAA,EAAD,CAAS1M,MAAO,CAAC2M,QAAS,OAAQC,eAAgB,kBAC9C,kBAAC7L,EAAA,EAAD,CAAY8L,KAAK,QAAQ5L,MAAM,UAAU,aAAW,SAEpD,kBAAC6L,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAYrM,QAAQ,MAApB,kBAGA,kBAACiH,EAAA,EAAD,CAAQ3G,QAjBH,WACjBgL,EAAQgB,KAAK,WAgB+BtM,QAAS,WAAYO,MAAM,WAA3D,SACC4D,GAAiB,kBAAC8C,EAAA,EAAD,CAAQ3G,QAdxB,WACdqD,GRDsB,SAACA,GAC3BA,EAASI,EAAa,YACtBrC,IACKyD,MAAK,SAAAC,GAC0B,IAAxBA,EAAI1B,KAAK2B,YACT1B,EAASS,GAAgB,IACzBT,EAASI,EAAa,eAEtBN,EAAqB2B,EAAI1B,KAAMC,MAGtC6B,OAAM,SAACtG,GACJ8E,EAAyB9E,EAAOyE,UQE0B3D,QAAS,WAAYO,MAAM,WAA3D,YAEV,YAAXuC,GAAwB,kBAACyJ,EAAA,EAAD,CAAgBhM,MAAM,eAEnD,kBAACiM,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAS,kBAAM,kBAAC,GAAD,SAEvC,kBAAC,KAAD,CAAQD,KAAM,SAAUC,OAAS,kBAAM,kBAAC,GAAD,SAEvC,kBAAC,KAAD,CAAOD,KAAM,OAAQC,OAAS,kBAAM,sDAEpC,kBAAC,KAAD,CAAUC,KAAM,IAAM9D,GAAI,e,kBCrCxC+D,GAAcC,aAAgB,CAChCpI,MP7BuB,WAA6D,IAA5D2C,EAA2D,uDAAnDpD,EAAcuD,EAAqC,uCAC7EuF,EAAS,eAAO1F,GACtB,OAAQG,EAAOpD,MACX,IAAK,cACD,OAAO,2BAAIiD,GAAX,kBAAmBG,EAAOC,OAASJ,EAAMG,EAAOC,QAAQd,QAAO,SAAAqG,GAAC,OAAIA,EAAE7L,KAAOqG,EAAOrG,QACxF,IAAK,WACD,OAAO,2BAAIkG,GAAX,kBAAmBG,EAAO/C,KAAKwI,WAA/B,CAA6CzF,EAAO/C,MAApD,mBAA6D4C,EAAMG,EAAO/C,KAAKwI,gBACnF,IAAK,cACD,OAAO,2BACA5F,GADP,kBAEKG,EAAOvG,OAASoG,EAAMG,EAAOvG,QACzB6F,KAAI,SAAAlC,GAAC,OAAIA,EAAEzD,KAAOqG,EAAOjG,OAAhB,2BAA6BqD,GAAM4C,EAAOnC,OAAST,OAEzE,IAAK,eACD,OAAO,2BAAIyC,GAAX,kBAAmBG,EAAOU,SAAS/G,GAAK,KAC5C,IAAK,kBAED,cADO4L,EAAUvF,EAAOrG,IACjB4L,EACX,IAAK,gBACD,OAAOvF,EAAOL,UAAU+F,QAAO,SAACC,EAAKC,GAEjC,OADAL,EAAUK,EAAIjM,IAAM,GACb4L,IAFJ,eAGA1F,IAKX,IAAK,YACD,OAAO,2BAAIA,GAAX,kBAAmBG,EAAOlG,WAAakG,EAAO9C,QAClD,QACI,OAAO2C,IOAfF,UL9B2B,WAA0E,IAAzEE,EAAwE,uDAAhEpD,GAAcuD,EAAkD,uCACpG,OAAQA,EAAOpD,MACX,IAAK,kBACD,OAAOiD,EAAMV,QAAO,SAAA/B,GAAC,OAAIA,EAAEzD,IAAMqG,EAAOrG,MAC5C,IAAK,eACD,MAAM,CAAN,2BAAYqG,EAAOU,UAAnB,IAA6BvB,OAAQ,MAAO9H,aAAc,UAA1D,mBAAsEwI,IAC1E,IAAM,wBACF,OAAOA,EAAMP,KAAI,SAAAuG,GAAE,OAAIA,EAAGlM,KAAOqG,EAAOrG,GAAjB,2BAA0BkM,GAA1B,IAA8BtO,MAAOyI,EAAOzI,QAASsO,KAChF,IAAK,kBACD,OAAehG,EAAMP,KAAI,SAAAuG,GAAE,OAAIA,EAAGlM,KAAOqG,EAAOlG,WAAjB,2BAAkC+L,GAAlC,IAAsC1G,OAAQa,EAAOb,SAAU0G,KAClG,IAAK,gBACD,OAAO7F,EAAOL,UAAUL,KAAI,SAAClC,GAAD,mBAAC,eAAWA,GAAZ,IAAe+B,OAAQ,MAAO9H,aAAc,YAC5E,IAAK,gCACD,OAAOwI,EAAMP,KAAI,SAAAuG,GAAE,OAAIA,EAAGlM,KAAOqG,EAAOrG,GAAjB,2BAA0BkM,GAA1B,IAA8B1G,OAAQ,MAAO9H,aAAc,YAAawO,KACnG,QACI,OAAOhG,IKgBf4B,IRxBsB,WAAmF,IAAlF5B,EAAiF,uDAAvDpD,EAAcuD,EAAyC,uCACxG,OAAQA,EAAOpD,MACX,IAAK,iBACD,OAAO,2BAAIiD,GAAX,IAAkBxE,OAAQ2E,EAAO3E,SACrC,IAAK,gBACD,OAAO,2BAAKwE,GAAZ,IAAmBpI,MAAOuI,EAAOvI,QACrC,IAAK,sBACD,OAAO,2BAAIoI,GAAX,IAAkBhD,cAAemD,EAAOnD,gBAC5C,QACI,OAAOgD,IQgBfC,YT9BuB,WAAmF,IAAlFD,EAAiF,uDAAvDpD,EAAcuD,EAAyC,uCACzG,OAAQA,EAAOpD,MACX,IAAK,yBACD,OAAO,2BAAIiD,GAAX,IAAkBnD,WAAYsD,EAAO/H,QACzC,QACI,OAAO4H,MS4BNiG,GAAQC,aAAYV,GAAaW,aAAgBC,OAO9DtP,OAAOmP,MAAQA,G,aCzCfI,IAASf,OAED,kBAAC,IAAD,CAAUW,MAAOA,IACb,kBAAC,KAAD,KACA,kBAAC,GAAD,QAGRK,SAASC,eAAe,ShB2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7I,MAAK,SAAA8I,GACJA,EAAaC,gBAEd1I,OAAM,SAAAtG,GACL4C,QAAQ5C,MAAMA,EAAM+E,a","file":"static/js/main.8e6146df.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '978dde1d-b974-4ee1-a942-d32857675e96'\r\n    }\r\n})\r\n\r\n//api\r\nexport const todoListsApi = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    delTodoLists(todoId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoId}`)\r\n    },\r\n    updTodoLists(title: string, id: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title})\r\n    },\r\n    createTodoLists(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    getTasks(todolistId:string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(title:string,todolistId:string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title:title})\r\n    },\r\n    updateTask(taskId:string, properties:UpdateTaskModelType, todolistId:string) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, properties) // {properties} не ставить на обновление!!\r\n    },\r\n    deleteTask(id: string, todoId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoId}/tasks/${id}`)\r\n    },\r\n}\r\nexport const authMeApi = {\r\n    login(dataLogin:LoginParamsType){\r\n        return instance.post<ResponseType<{userId:number}>>('auth/login', dataLogin)\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<{id:number,login:string,email:string}>>('auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\nexport type LoginParamsType = {\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n    captcha?:string\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, { ChangeEvent, useState, KeyboardEvent, useCallback } from 'react';\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport '../../App/App.css';\r\nimport { AddBox } from '@material-ui/icons';\r\nimport { RequestStatusType } from '../../State/App-reducer';\r\n\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title:string) => void\r\n    entityStatus?:RequestStatusType\r\n}\r\n\r\nexport const AddTodoListForm = React.memo(function({addItem,entityStatus}: AddItemFormType) {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const textError = 'Title is required'\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError(textError);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    return (\r\n        <div style={{ marginTop:'20px',marginBottom: '17px' }}>\r\n            <TextField\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                variant={'outlined'}\r\n                helperText={error}\r\n                label={'Title'}\r\n                size={'small'}\r\n                error={!!error}\r\n                disabled={entityStatus === 'loading'}\r\n            />\r\n            <IconButton\r\n                disabled={entityStatus === 'loading'}\r\n                onClick={addTask}\r\n                color={'primary'}\r\n                size={'small'}>\r\n                <AddBox fontSize={'large'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n\r\n})","import React, { ChangeEvent, useState } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\nimport { TaskStatuses } from '../../Api/TodoListsApi';\r\n\r\ntype EditInputType = {\r\n    title: string\r\n    onChange:(value:string) => void\r\n    statuses?:TaskStatuses\r\n}\r\nexport const EditSpan = React.memo((props: EditInputType) => {\r\n    console.log('edit-input')\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(props.title)\r\n\r\n    const spanStrikeout = props.statuses === TaskStatuses.Completed ? 'span-strikeout': ''\r\n\r\n    const onEditSpan = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const offEditSpan =  () =>{\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode ? <TextField color={'primary'} size={'small'} autoFocus={true} onBlur={offEditSpan} onChange={onChangeHandler} value={title}/> :\r\n        <span className={spanStrikeout} onDoubleClick={onEditSpan}>{props.title}</span>\r\n})","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { Checkbox, IconButton } from '@material-ui/core';\r\nimport { EditSpan } from '../../Components/EditSpan/EditSpan';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { TaskStatuses } from '../../Api/TodoListsApi';\r\n\r\n\r\nexport type TasksComponentType = {\r\n    todoId: string\r\n    taskId: string\r\n    removeTask: (taskId: string, todoId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoId: string) => void\r\n    changeTaskValueNew: (taskId: string, valueNew: string, todoId: string) => void\r\n    titleEditInput: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport const Tasks = React.memo(({\r\n                                     todoId,\r\n                                     taskId,\r\n                                     removeTask,\r\n                                     changeTaskStatus,\r\n                                     changeTaskValueNew,\r\n                                     titleEditInput,\r\n                                     status\r\n                                 }: TasksComponentType) => {\r\n\r\n    const onChangeHandlerWrapper = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const newStatusValue = e.currentTarget.checked\r\n        changeTaskStatus(taskId, newStatusValue ? TaskStatuses.Completed : TaskStatuses.New, todoId)\r\n    }, [changeTaskStatus, taskId, todoId])\r\n\r\n    const onChangeInputValueWrapper = useCallback(function (valueNew: string) {\r\n        changeTaskValueNew(taskId, valueNew, todoId)\r\n    }, [changeTaskValueNew, taskId, todoId])\r\n\r\n    const removeTaskWrapper = useCallback(() => removeTask(taskId, todoId), [removeTask, taskId, todoId])\r\n\r\n    return <>\r\n        <li >\r\n            <Checkbox\r\n                className={status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                checked={status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandlerWrapper}\r\n            />\r\n            <EditSpan  statuses={status} title={titleEditInput} onChange={onChangeInputValueWrapper}/>\r\n            <IconButton onClick={removeTaskWrapper} size={'small'}>\r\n                <Delete fontSize={'medium'}/>\r\n            </IconButton>\r\n        </li>\r\n    </>\r\n\r\n})","import { ResponseType } from '../Api/TodoListsApi';\r\nimport { setAppError, setAppStatus } from '../State/App-reducer';\r\nimport { AppDispatchType } from '../Store/Store';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: AppDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppError('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: AppDispatchType) => {\r\n    dispatch(setAppError(error.message))\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\n","import { ActionType, AppDispatchType, AppRootStateType } from '../Store/Store';\r\nimport { setAppStatus } from './App-reducer';\r\nimport { authMeApi, LoginParamsType } from '../Api/TodoListsApi';\r\nimport { handleServerAppError, handleServerNetworkError } from '../Utils/Error-utils';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        authMeApi.login(data)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(true))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(rej => {\r\n            handleServerNetworkError(rej.messages, dispatch)\r\n        })\r\n}\r\nexport const initializeAppTC = () => (dispatch: AppDispatchType) => {\r\n    authMeApi.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n        }\r\n    })\r\n}\r\nexport const logoutTC = () => (dispatch: AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    authMeApi.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n","import { ActionType } from '../Store/Store';\r\nimport { setIsLoggedInAC } from './authReducer';\r\nimport { Dispatch } from 'redux';\r\nimport { authMeApi } from '../Api/TodoListsApi';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return { ...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAppStatus = (status: RequestStatusType) => ({type:'APP/SET-STATUS', status} as const)\r\n\r\nexport const setAppError = (error: string | null) => ({type:'APP/SET-ERROR', error} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) => ({type:'APP/SET-INITIALIZED', isInitialized} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionType>) => {\r\n    authMeApi.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        }\r\n    }).finally(() => {\r\n        dispatch(setIsInitializedAC(true))\r\n    })\r\n}\r\n","import { ActionType, AppDispatchType, AppRootStateType } from '../Store/Store';\r\nimport { setAppError, setAppStatus } from './App-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../Utils/Error-utils';\r\nimport { TaskPriorities, TaskStatuses, TaskType, todoListsApi, UpdateTaskModelType } from '../Api/TodoListsApi';\r\n\r\n\r\nconst initialState: TodoTaskType = {}\r\n\r\nexport const taskReducer = (state = initialState, action: ActionType): TodoTaskType => {\r\n    const stateCopy = {...state}\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.idTodo]: state[action.idTodo].filter(f => f.id !== action.id)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoId]: state[action.todoId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoList.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.reduce((acc, cur) => {\r\n                stateCopy[cur.id] = []\r\n                return stateCopy\r\n            }, {...state})\r\n        /*action.todolists.forEach((tl) => {\r\n            stateCopy[tl.id] = []\r\n        })\r\n        return stateCopy;*/\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\nexport const removeTaskAC = (id: string, idTodo: string) => ({type: 'REMOVE-TASK', idTodo, id} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoId: string) =>\r\n    ({type: 'UPDATE-TASK', taskId, model, todoId} as const)\r\n\r\n\r\n//thunk\r\nexport const fetchTasksThunk = (todolistId: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.getTasks(todolistId)\r\n            .then((res) => {\r\n                if (res.data.items) {\r\n                    dispatch(setTasksAC(res.data.items, todolistId))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else if (res.data.error.length) {\r\n                    dispatch(setAppError(res.data.error[0]))\r\n                } else {\r\n                    dispatch(setAppError('Some error occurred'))\r\n                }\r\n                dispatch(setAppStatus('failed'))\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.error, dispatch)\r\n        })\r\n    }\r\nexport const removeTaskThunk = (taskId: string, todolistId: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.deleteTask(taskId, todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTaskAC(taskId, todolistId))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\nexport const addTaskThunk = (title: string, todoId: string) =>\r\n    (dispatch: AppDispatchType, getState: AppRootStateType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.createTask(title, todoId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(rej => {\r\n            handleServerNetworkError(rej.messages, dispatch)\r\n        })\r\n    }\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: AppDispatchType, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        dispatch(setAppStatus('loading'))\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n           /* ...domainModel*/\r\n        }\r\n        todoListsApi.updateTask(taskId, apiModel, todolistId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\n\r\n\r\n//types\r\nexport type TodoTaskType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { AddTodoListForm } from '../../Components/AddItemForm/AddTodoListForm';\r\nimport { EditSpan } from '../../Components/EditSpan/EditSpan';\r\nimport { Button, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { Tasks } from '../Tasks/Tasks';\r\nimport { FilterValuesType } from '../../State/todoList-reducer';\r\nimport { fetchTasksThunk } from '../../State/task-reducer';\r\nimport { useDispatch } from 'react-redux';\r\nimport { RequestStatusType } from '../../State/App-reducer';\r\nimport { TaskStatuses, TaskType } from '../../Api/TodoListsApi';\r\n\r\ntype PropsTodoType = {\r\n    titleTodoList: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoId: string) => void\r\n    changeFilterTasks: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todoId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoId: string) => void\r\n    changeTaskValueNew: (taskId: string, valueNew: string, todoId: string) => void\r\n    filter: FilterValuesType\r\n    idTodoList: string\r\n    delTodolist: (id: string) => void\r\n    changeTitleTodoList: (newTitle: string, id: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsTodoType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksThunk(props.idTodoList))\r\n    }, [dispatch, props.idTodoList])\r\n    const changeTitleValueNewWrapper = useCallback((newTitle: string) => {\r\n        props.changeTitleTodoList(newTitle, props.idTodoList)\r\n    }, [])\r\n\r\n    const onAllClickHandlerWrapper = useCallback(() => props.changeFilterTasks(props.idTodoList, 'all'), [props.changeFilterTasks, props.idTodoList])\r\n\r\n    const onActiveClickHandlerWrapper = useCallback(() => props.changeFilterTasks(props.idTodoList, 'active'), [props.changeFilterTasks, props.idTodoList])\r\n\r\n    const onCompletedClickHandlerWrapper = useCallback(() => props.changeFilterTasks(props.idTodoList, 'completed'), [props.changeFilterTasks, props.idTodoList])\r\n\r\n    const addTaskWrapper = useCallback((title: string) => {\r\n        props.addTask(title, props.idTodoList)\r\n    }, [props.addTask, props.idTodoList])\r\n\r\n    const deleteTodoListWrapper = useCallback(() => {\r\n        props.delTodolist(props.idTodoList)\r\n    }, [props.delTodolist, props.idTodoList])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3>\r\n            <IconButton disabled={props.entityStatus === 'loading'} onClick={deleteTodoListWrapper}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <EditSpan title={props.titleTodoList} onChange={changeTitleValueNewWrapper}/>\r\n        </h3>\r\n        <AddTodoListForm entityStatus={props.entityStatus} addItem={addTaskWrapper}/>\r\n        <ul style={{listStyle: 'none'}}>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <div key={t.id}>\r\n                        <Tasks removeTask={props.removeTask} todoId={props.idTodoList}\r\n                               changeTaskStatus={props.changeTaskStatus}\r\n                               changeTaskValueNew={props.changeTaskValueNew}\r\n                               titleEditInput={t.title}\r\n                               taskId={t.id}\r\n                               status={t.status}/>\r\n                    </div>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button\r\n                style={{backgroundColor: 'red'}}\r\n                size={'medium'}\r\n                variant={props.filter === 'all' ? 'outlined' : 'contained'}\r\n                onClick={onAllClickHandlerWrapper}>All</Button>\r\n            <Button\r\n                variant={props.filter === 'active' ? 'outlined' : 'contained'}\r\n                onClick={onActiveClickHandlerWrapper}>Active</Button>\r\n            <Button\r\n                variant={props.filter === 'completed' ? 'outlined' : 'contained'}\r\n                onClick={onCompletedClickHandlerWrapper}>Completed</Button>\r\n        </div>\r\n    </div>\r\n})\r\n","import { todoListsApi, TodolistType } from '../Api/TodoListsApi';\r\nimport { ActionType, AppDispatchType } from '../Store/Store';\r\nimport { RequestStatusType, setAppError, setAppStatus } from './App-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../Utils/Error-utils';\r\n\r\n\r\nlet initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todoListReducer = (state = initialState, action: ActionType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case  'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'FILTER-TODOLIST':\r\n            return state = state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map((t) => ({...t, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: 'all', entityStatus: 'loading'} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//action\r\nexport const changeTodolistEntityStatus = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\nexport const daleteTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todoList: TodolistType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const updateTodoListTitleAC = (title: string, id: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title,\r\n    id\r\n} as const)\r\nexport const changeTodoListFilterAC = (todolistId: string, filter: FilterValuesType) => ({\r\n    type: 'FILTER-TODOLIST',\r\n    todolistId,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n\r\n/// thunk\r\nexport const setTodoListsThunk = () =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.getTodolists()\r\n            .then((res) => {\r\n                if (res.data) {\r\n                    dispatch(setTodolistsAC(res.data))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    dispatch(setAppError('TodoList is not found'))\r\n                    dispatch(setAppStatus('failed'))\r\n                }\r\n            }).catch(err => {\r\n            /*handleServerNetworkError(err.messages, dispatch)*/\r\n            alert('error set todoLists')\r\n                     dispatch(setAppError('TodoList is not found'))\r\n                    dispatch(setAppStatus('failed'))\r\n        })\r\n        \r\n    }\r\nexport const addTodoListThunk = (title: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.createTodoLists(title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(err => {\r\n                alert('fail reqest')\r\n                dispatch(setAppStatus('idle'))\r\n           // handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\nexport const deleteTodoListThunk = (todoId: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(changeTodolistEntityStatus(todoId, 'loading'))\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.delTodoLists(todoId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(daleteTodolistAC(todoId))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\nexport const updateTodoListTitleThunk = (title: string, id: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.updTodoLists(title, id)\r\n            .then(res => {\r\n               if (res){\r\n                   dispatch(updateTodoListTitleAC(title, id))\r\n                   dispatch(setAppStatus('idle'))\r\n               }else {\r\n                   dispatch(setAppError('TodoList is not found'))\r\n                   dispatch(setAppStatus('failed'))\r\n               }\r\n            }).catch(() => {\r\n            handleServerNetworkError( { message: 'Error Net Work'},dispatch)\r\n        })\r\n    }\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import React, { useCallback, useEffect } from 'react';\r\nimport { Grid, Paper } from '@material-ui/core';\r\nimport { Todolist } from '../TodoList/Todolist';\r\nimport {\r\n    addTodoListThunk,\r\n    changeTodoListFilterAC,\r\n    deleteTodoListThunk,\r\n    FilterValuesType,\r\n    setTodoListsThunk,\r\n    TodoListDomainType,\r\n    updateTodoListTitleThunk\r\n} from '../../State/todoList-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../Store/Store';\r\nimport { addTaskThunk, removeTaskThunk, TodoTaskType, updateTaskTC } from '../../State/task-reducer';\r\nimport { AddTodoListForm } from '../../Components/AddItemForm/AddTodoListForm';\r\nimport { TaskStatuses } from '../../Api/TodoListsApi';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\ntype TodoListsListType = {\r\n\r\n}\r\n\r\n\r\nexport const TodoListsList: React.FC<TodoListsListType> = (props) => {\r\n    const todolists = useSelector<AppRootStateType, TodoListDomainType[]>(state => state.todolists)\r\n\r\n    const tasks = useSelector<AppRootStateType, TodoTaskType>(state => state.tasks)\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.authReducer.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn){\r\n            return\r\n        }\r\n        dispatch(setTodoListsThunk())\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todoId: string) {\r\n        const action = removeTaskThunk(id, todoId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todoId: string) {\r\n        const action = addTaskThunk(title, todoId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todoId: string) {\r\n        const action = updateTaskTC(id, {status:status}, todoId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskValueNew = useCallback(function (id: string, valueNew: string, todoId: string) {\r\n        const action = updateTaskTC(id, {title:valueNew}, todoId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (todolistId: string, value: FilterValuesType) {\r\n        const action = changeTodoListFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n/////////////////////////////////\r\n    const delTodolist = useCallback(function (id: string) {\r\n        const action = deleteTodoListThunk(id)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback(function (title: string) {\r\n        const action = addTodoListThunk(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTitleTodoList = useCallback(function (title: string, id: string) {\r\n        const action = updateTodoListTitleThunk(title, id)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn){\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px, 0'}}>\r\n            <AddTodoListForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(todo => {\r\n                    let allTaskForTodoList = tasks[todo.id]\r\n                    return (\r\n                            <Grid item key={todo.id}>\r\n                                <Paper style={{padding: '20px'}} elevation={5}>\r\n                                    <Todolist\r\n                                        entityStatus={todo.entityStatus}\r\n                                        changeTitleTodoList={changeTitleTodoList}\r\n                                        changeTaskValueNew={changeTaskValueNew}\r\n                                        delTodolist={delTodolist}\r\n                                        idTodoList={todo.id}\r\n                                        titleTodoList={todo.title}\r\n                                        tasks={allTaskForTodoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilterTasks={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={todo.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                    )\r\n                })}\r\n        </Grid>\r\n    </>\r\n};\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../Store/Store';\r\nimport { setAppError } from '../../State/App-reducer';\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppError(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginTC } from '../../State/authReducer';\r\nimport { AppRootStateType } from '../../Store/Store';\r\nimport { Redirect } from 'react-router-dom';\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.authReducer.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n           if (values.password.length < 3) {\r\n                errors.password = 'Pole to be 3 symbol';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <FormLabel>\r\n                <p>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n                       target={'_blank'}>here\r\n                    </a>\r\n                </p>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            </FormLabel>\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n\r\n                        />\r\n                        {formik.errors.email  ? <div> {formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n\r\n                        />\r\n                        {\r\n                            formik.touched.email &&\r\n                            formik.errors.password  ? <div> {formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                checked={formik.values.rememberMe}\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n            </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'; // тянет всю библиотеку, разбить на ипорты!!!!\r\nimport { MenuOpen } from '@material-ui/icons';\r\nimport { TodoListsList } from '../Pages/TodoListsList/TodoListsList';\r\nimport { AppRootStateType } from '../Store/Store';\r\nimport { initializeAppTC, RequestStatusType } from '../State/App-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ErrorSnackbar } from '../Components/ErrorSnackBar/ErrorSnackBar';\r\nimport { Login } from '../Pages/Login/Login';\r\nimport { Redirect, Route, Switch,useHistory  } from 'react-router-dom';\r\nimport { logoutTC } from '../State/authReducer';\r\n\r\n\r\n\r\nconst App = React.memo(function () {\r\n\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.authReducer.isLoggedIn)\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const loginHandler = () => {\r\n        history.push('/login')\r\n    }\r\n\r\nconst logOutHandler = () =>{\r\n        dispatch(logoutTC())\r\n}\r\n    return <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar style={{background: '#3F5172', color: 'white'}} position=\"static\">\r\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    </IconButton>\r\n                    <MenuOpen/>\r\n                    <Typography variant=\"h6\">\r\n                        MY TODOLIST :)\r\n                    </Typography>\r\n                    <Button onClick={loginHandler}  variant={'outlined'} color=\"inherit\">Login</Button>\r\n                    {isLoggedIn  &&   <Button onClick={logOutHandler} variant={'outlined'} color=\"inherit\">Log-Out</Button> }\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={ () => <TodoListsList  />}/>\r\n\r\n                    <Route  path={'/login'} render={ () => <Login/>}/>\r\n\r\n                    <Route path={'/404'} render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n\r\n                    <Redirect from={'*'}  to={'/404'} />\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n})\r\n\r\nexport default App;\r\n","import { applyMiddleware, combineReducers, createStore, Dispatch } from 'redux';\r\nimport { addTaskAC, removeTaskAC, setTasksAC, taskReducer, updateTaskAC } from '../State/task-reducer';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistEntityStatus,\r\n    changeTodoListFilterAC,\r\n    daleteTodolistAC,\r\n    setTodolistsAC,\r\n    todoListReducer,\r\n    updateTodoListTitleAC\r\n} from '../State/todoList-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport { appReducer, setAppError, setAppStatus, setIsInitializedAC } from '../State/App-reducer';\r\nimport { authReducer, setIsLoggedInAC } from '../State/authReducer';\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\n\r\n\r\nexport type ActionType =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n    | ReturnType<typeof daleteTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof updateTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof changeTodolistEntityStatus>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todoListReducer,\r\n    app: appReducer,\r\n    authReducer: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatchType = Dispatch<ActionType>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App/App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './Store/Store';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n\r\n        <Provider store={store}>\r\n            <BrowserRouter>\r\n            <App/>\r\n            </BrowserRouter>\r\n        </Provider>,\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}