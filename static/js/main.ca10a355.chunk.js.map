{"version":3,"sources":["serviceWorker.ts","Api/TodoListsApi.ts","Components/AddItemForm/AddTodoListForm.tsx","Components/EditableSpan/EditableSpan.tsx","Pages/Tasks/Tasks.tsx","Utils/Error-utils.ts","State/authReducer.ts","State/App-reducer.ts","State/task-reducer.ts","Pages/TodoList/Todolist.tsx","State/todoList-reducer.ts","Pages/TodoListsList/TodoListsList.tsx","Components/ErrorSnackBar/ErrorSnackBar.tsx","Pages/Login/Login.tsx","App/App.tsx","Store/Store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddTodoListForm","React","memo","addItem","entityStatus","useState","title","setTitle","error","setError","addTask","trim","style","marginTop","marginBottom","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","variant","helperText","label","size","disabled","IconButton","onClick","color","AddBox","fontSize","instance","axios","create","baseURL","withCredentials","headers","todoListsApi","get","todoId","delete","id","put","post","todolistId","taskId","properties","authMeApi","dataLogin","EditableSpan","props","console","log","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Tasks","removeTask","changeTaskStatus","changeTaskValueNew","titleEditInput","status","onChangeHandlerWrapper","useCallback","newStatusValue","checked","Completed","New","onChangeInputValueWrapper","valueNew","removeTaskWrapper","Checkbox","className","Delete","handleServerAppError","data","dispatch","messages","length","setAppError","setAppStatus","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","authReducer","reducer","actions","isInitialized","setIsInitializedAC","appReducer","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","model","type","updateTaskAC","catch","err","warn","Todolist","useDispatch","useEffect","idTodoList","items","setTasksAC","changeTitleValueNewWrapper","newTitle","changeTitleTodoList","onAllClickHandlerWrapper","changeFilterTasks","onActiveClickHandlerWrapper","onCompletedClickHandlerWrapper","addTaskWrapper","deleteTodoListWrapper","delTodolist","tasksForTodolist","filter","titleTodoList","listStyle","map","Button","backgroundColor","TodoListsList","todolists","useSelector","alert","idTodo","item","rej","addTaskThunk","changeStatus","changeFilter","changeTodoListFilterAC","daleteTodolistAC","addTodoList","todoList","addTodoListThunk","updateTodoListTitleAC","updateTodoListTitleThunk","Grid","container","padding","spacing","todo","allTaskForTodoList","Paper","elevation","to","ErrorSnackbar","app","Snackbar","open","autoHideDuration","onClose","event","reason","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","direction","alignItems","FormLabel","href","target","handleSubmit","FormControl","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","history","useHistory","finally","position","top","textAlign","width","CircularProgress","AppBar","background","Toolbar","display","justifyContent","edge","Typography","push","LinearProgress","Container","fixed","exact","path","render","from","rootReducer","combineReducers","stateCopy","f","todoListId","reduce","acc","cur","tl","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCkDMC,EAMAC,E,2HC9DCC,EAAkBC,IAAMC,MAAK,SAAS,GAA0C,IAAzCC,EAAO,EAAPA,QAAQC,EAAY,EAAZA,aAExD,EAA0BC,mBAAS,IAAG,mBAA/BC,EAAK,KAAEC,EAAQ,KACtB,EAA0BF,mBAAwB,MAAK,mBAAhDG,EAAK,KAAEC,EAAQ,KAIhBC,EAAU,WACS,KAAjBJ,EAAMK,QACNR,EAAQG,GACRC,EAAS,KAETE,EAPU,oBASlB,EAaA,OACI,sBAAKG,MAAO,CAAEC,UAAU,OAAOC,aAAc,QAAS,UAClD,cAACC,EAAA,EAAS,CACNC,MAAOV,EACPW,SAfY,SAACC,GACrBX,EAASW,EAAEC,cAAcH,OACzBP,EAAS,GACb,EAaYW,WAXc,SAACF,GACvBT,EAAS,MACU,KAAfS,EAAEG,UACFX,GAER,EAOYY,QAAS,WACTC,WAAYf,EACZgB,MAAO,QACPC,KAAM,QACNjB,QAASA,EACTkB,SAA2B,YAAjBtB,IAEd,cAACuB,EAAA,EAAU,CACPD,SAA2B,YAAjBtB,EACVwB,QAASlB,EACTmB,MAAO,UACPJ,KAAM,QAAQ,SACd,cAACK,EAAA,EAAM,CAACC,SAAU,cAKlC,I,0BD3DMC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAKNC,EACG,WACR,OAAON,EAASO,IAAyB,aAC7C,EAHSD,EAIG,SAACE,GACT,OAAOR,EAASS,OAAM,qBAA6BD,GACvD,EANSF,EAOG,SAAChC,EAAeoC,GACxB,OAAOV,EAASW,IAAG,qBAA6BD,GAAM,CAACpC,SAC3D,EATSgC,EAUM,SAAChC,GACZ,OAAO0B,EAASY,KAA2C,aAAc,CAACtC,SAC9E,EAZSgC,EAaD,SAACO,GACL,OAAOb,EAASO,IAAG,qBAAiCM,EAAU,UAClE,EAfSP,EAgBC,SAAChC,EAAauC,GACpB,OAAOb,EAASY,KAAI,qBAA+CC,EAAU,UAAU,CAACvC,MAAMA,GAClG,EAlBSgC,EAmBC,SAACQ,EAAeC,EAAgCF,GACtD,OAAOb,EAASW,IAAG,qBAA+CE,EAAU,kBAAUC,GAAUC,EACpG,EArBST,EAsBC,SAACI,EAAYF,GACnB,OAAOR,EAASS,OAAM,qBAA6BD,EAAM,kBAAUE,GACvE,EAESM,EACJ,SAACC,GACF,OAAOjB,EAASY,KAAoC,aAAcK,EACtE,EAHSD,EAIP,WACE,OAAOhB,EAASO,IAAyD,UAC7E,EANSS,EAOH,WACF,OAAOhB,EAASS,OAAqB,aACzC,GA0BH,SALW3C,OAAY,aAAZA,IAAY,2BAAZA,IAAY,yBAAZA,IAAY,iBAKvB,CALWA,MAAY,KAYvB,SANWC,OAAc,aAAdA,IAAc,mBAAdA,IAAc,WAAdA,IAAc,uBAAdA,IAAc,iBAMzB,CANWA,MAAc,KElEnB,IAAMmD,EAAejD,IAAMC,MAAK,SAAUiD,GAC7CC,QAAQC,IAAI,uBACZ,MAA8BhD,oBAAS,GAAM,mBAAxCiD,EAAQ,KAAEC,EAAW,KAC1B,EAAwBlD,mBAAS8C,EAAMnC,OAAM,mBAAxCV,EAAK,KAAEC,EAAQ,KAcpB,OAAO+C,EACE,cAACvC,EAAA,EAAS,CAACC,MAAOV,EAAOW,SALd,SAACC,GACjBX,EAASW,EAAEC,cAAcH,MAC7B,EAGyDwC,WAAS,EAACC,OAT1C,WACrBF,GAAY,GACZJ,EAAMlC,SAASX,EACnB,IAOM,sBAAMoD,cAda,WACrBH,GAAY,GACZhD,EAAS4C,EAAMnC,MACnB,EAW4C,SAAEmC,EAAMnC,OACxD,ICXa2C,EAAQ1D,IAAMC,MAAK,YAQ4B,IAPvBsC,EAAM,EAANA,OACAM,EAAM,EAANA,OACAc,EAAU,EAAVA,WACAC,EAAgB,EAAhBA,iBACAC,EAAkB,EAAlBA,mBACAC,EAAc,EAAdA,eACAC,EAAM,EAANA,OAG3BC,EAAyBC,uBAAY,SAAChD,GACxC,IAAMiD,EAAiBjD,EAAEC,cAAciD,QACvCP,EAAiBf,EAAQqB,EAAiBrE,EAAauE,UAAYvE,EAAawE,IAAK9B,EACzF,GAAG,CAACqB,EAAkBf,EAAQN,IAExB+B,EAA4BL,uBAAY,SAAUM,GACpDV,EAAmBhB,EAAQ0B,EAAUhC,EACzC,GAAG,CAACsB,EAAoBhB,EAAQN,IAE1BiC,EAAoBP,uBAAY,kBAAMN,EAAWd,EAAQN,EAAO,GAAE,CAACoB,EAAYd,EAAQN,IAE7F,OAAO,mCACH,+BACI,cAACkC,EAAA,EAAQ,CACLC,UAAWX,IAAWlE,EAAauE,UAAY,UAAY,GAC3DD,QAASJ,IAAWlE,EAAauE,UACjCxC,MAAM,UACNZ,SAAUgD,IAEd,cAACf,EAAY,CAAElC,MAAO+C,EAAgB9C,SAAUsD,IAChD,cAAC5C,EAAA,EAAU,CAACC,QAAS6C,EAAmBhD,KAAM,QAAQ,SAClD,cAACmD,EAAA,EAAM,CAAC7C,SAAU,iBAKlC,I,uBChDa8C,EAAuB,SAAIC,EAAuBC,GACvDD,EAAKE,SAASC,OACdF,EAASG,GAAYJ,EAAKE,SAAS,KAEnCD,EAASG,GAAY,wBAEzBH,EAASI,EAAa,UAC1B,EAEaC,EAA2B,SAAC5E,EAA0BuE,GAC/DA,EAASG,GAAY1E,EAAM6E,UAC3BN,EAASI,EAAa,UAC1B,E,QCVMG,EAAQC,YAAY,CACtBC,KAAM,OACNC,aAAc,CACVC,YAAY,GAEhBC,SAAU,CACNC,cAAa,SAACC,EAAYC,GACtBD,EAAMH,WAAaI,EAAOC,QAAQ/E,KACtC,KAGKgF,EAAcV,EAAMW,QAClBL,EAAkBN,EAAMY,QAAxBN,cCLTN,EAAQC,YAAY,CACtBC,KAAM,OACNC,aAPiB,CACjBzB,OAAQ,OACRxD,MAAO,KACP2F,eAAe,GAKfR,SAAU,CACNR,aAAY,SAACU,EAAYC,GACrBD,EAAM7B,OAAS8B,EAAOC,QAAQ/B,MAClC,EACAkB,YAAW,SAACW,EAAYC,GACpBD,EAAMrF,MAAQsF,EAAOC,QAAQvF,KACjC,EACA4F,mBAAkB,SAACP,EAAYC,GAC3BD,EAAMM,cAAgBL,EAAOC,QAAQI,aACzC,KAGKE,EAAaf,EAAMW,QACzB,EAAwDX,EAAMY,QAAvDf,EAAY,EAAZA,aAAcD,GAAW,EAAXA,YAAakB,GAAkB,EAAlBA,mBCxBnCX,GAA6B,CAAC,EAkGvBa,GAAe,SAACxD,EAAgByD,EAAwC1D,GAAkB,OACnG,SAACkC,EAA2ByB,GACxB,IACMC,EADQD,IACKE,MAAM7D,GAAY8D,MAAK,SAACC,GAAkB,OAAKA,EAAElE,KAAOI,CAAM,IACjF,GAAK2D,EAAL,CAKA1B,EAASI,EAAa,YACtB,IAAM0B,EAAgC,CAClCC,SAAUL,EAAKK,SACfC,YAAaN,EAAKM,YAClBC,SAAUP,EAAKO,SACfC,UAAWR,EAAKQ,UAChB3G,MAAOmG,EAAKnG,MACZ0D,OAAQyC,EAAKzC,QAGjB1B,EAAwBQ,EAAQ+D,EAAUhE,GACrCqE,MAAK,SAAAC,GAC0B,IAAxBA,EAAIrC,KAAKsC,YACTrC,EA5EQ,SAACjC,EAAgBuE,EAAkC7E,GAAc,MACxF,CAAC8E,KAAM,cAAexE,SAAQuE,QAAO7E,SAAO,CA2EpB+E,CAAazE,EAAQyD,EAAa1D,IAC3CkC,EAASI,EAAa,eAEtBN,EAAqBsC,EAAIrC,KAAMC,EAEvC,IAAGyC,OAAM,SAAAC,GACTrC,EAAyBqC,EAAIzC,SAAUD,EAC3C,GArBA,MAFI3B,QAAQsE,KAAK,8BAwBrB,CAAC,E,SC3GQC,GAAW1H,IAAMC,MAAK,SAAUiD,GAEzC,IAAM4B,EAAW6C,eACjBC,qBAAU,WDyBiB,IAAChF,ECxBxBkC,GDwBwBlC,ECxBCM,EAAM2E,WDyBnC,SAAC/C,GACGA,EAASI,EAAa,YACtB7C,EAAsBO,GACjBqE,MAAK,SAACC,GACCA,EAAIrC,KAAKiD,OACThD,EAhBM,SAAC2B,EAAwB7D,GAAkB,MAAM,CACvEyE,KAAM,YACNZ,QACA7D,aACH,CAY4BmF,CAAWb,EAAIrC,KAAKiD,MAAOlF,IACpCkC,EAASI,EAAa,UACfgC,EAAIrC,KAAKtE,MAAMyE,OACtBF,EAASG,GAAYiC,EAAIrC,KAAKtE,MAAM,KAEpCuE,EAASG,GAAY,wBAEzBH,EAASI,EAAa,UAC1B,IAAGqC,OAAM,SAAAC,GACTrC,EAAyBqC,EAAIjH,MAAOuE,EACxC,GACJ,GCxCA,GAAG,CAACA,EAAU5B,EAAM2E,aACpB,IAAMG,EAA6B/D,uBAAY,SAACgE,GAC5C/E,EAAMgF,oBAAoBD,EAAU/E,EAAM2E,WAC9C,GAAG,IAEGM,EAA2BlE,uBAAY,kBAAMf,EAAMkF,kBAAkBlF,EAAM2E,WAAY,MAAM,GAAE,CAAC3E,EAAMkF,kBAAmBlF,EAAM2E,aAE/HQ,EAA8BpE,uBAAY,kBAAMf,EAAMkF,kBAAkBlF,EAAM2E,WAAY,SAAS,GAAE,CAAC3E,EAAMkF,kBAAmBlF,EAAM2E,aAErIS,EAAiCrE,uBAAY,kBAAMf,EAAMkF,kBAAkBlF,EAAM2E,WAAY,YAAY,GAAE,CAAC3E,EAAMkF,kBAAmBlF,EAAM2E,aAE3IU,EAAiBtE,uBAAY,SAAC5D,GAChC6C,EAAMzC,QAAQJ,EAAO6C,EAAM2E,WAC/B,GAAG,CAAC3E,EAAMzC,QAASyC,EAAM2E,aAEnBW,EAAwBvE,uBAAY,WACtCf,EAAMuF,YAAYvF,EAAM2E,WAC5B,GAAG,CAAC3E,EAAMuF,YAAavF,EAAM2E,aAEzBa,EAAmBxF,EAAMuD,MAO7B,MANqB,WAAjBvD,EAAMyF,SACND,EAAmBxF,EAAMuD,MAAMkC,QAAO,SAAAhC,GAAC,OAAIA,EAAE5C,SAAWlE,EAAawE,GAAG,KAEvD,cAAjBnB,EAAMyF,SACND,EAAmBxF,EAAMuD,MAAMkC,QAAO,SAAAhC,GAAC,OAAIA,EAAE5C,SAAWlE,EAAauE,SAAS,KAE3E,gCACH,+BACI,cAAC1C,EAAA,EAAU,CAACD,SAAiC,YAAvByB,EAAM/C,aAA4BwB,QAAS6G,EAAsB,SACnF,cAAC7D,EAAA,EAAM,MAEX,cAAC1B,EAAY,CAAClC,MAAOmC,EAAM0F,cAAe5H,SAAUgH,OAExD,cAACjI,EAAe,CAACI,aAAc+C,EAAM/C,aAAcD,QAASqI,IAC5D,oBAAI5H,MAAO,CAACkI,UAAW,QAAQ,SAEvBH,EAAiBI,KAAI,SAAAnC,GACjB,OAAO,8BACH,cAACjD,EAAK,CAACC,WAAYT,EAAMS,WAAYpB,OAAQW,EAAM2E,WAC5CjE,iBAAkBV,EAAMU,iBACxBC,mBAAoBX,EAAMW,mBAC1BC,eAAgB6C,EAAEtG,MAClBwC,OAAQ8D,EAAElE,GACVsB,OAAQ4C,EAAE5C,UANJ4C,EAAElE,GAQvB,MAGR,gCACI,cAACsG,EAAA,EAAM,CACHpI,MAAO,CAACqI,gBAAiB,OACzBxH,KAAM,SACNH,QAA0B,QAAjB6B,EAAMyF,OAAmB,WAAa,YAC/ChH,QAASwG,EAAyB,iBACtC,cAACY,EAAA,EAAM,CACH1H,QAA0B,WAAjB6B,EAAMyF,OAAsB,WAAa,YAClDhH,QAAS0G,EAA4B,oBACzC,cAACU,EAAA,EAAM,CACH1H,QAA0B,cAAjB6B,EAAMyF,OAAyB,WAAa,YACrDhH,QAAS2G,EAA+B,4BAGxD,ICxFI9C,GAA0C,G,SCmBjCyD,GAA6C,SAAC/F,GACvD,IAAMgG,EAAYC,cAA6C,SAAAvD,GAAK,OAAIA,EAAMsD,SAAS,IAEjFzC,EAAQ0C,cAAqC,SAAAvD,GAAK,OAAIA,EAAMa,KAAK,IAEjEhB,EAAa0D,cAAgC,SAAAvD,GAAK,OAAIA,EAAMG,YAAYN,UAAU,IAElFX,EAAW6C,eAEjBC,qBAAU,WACDnC,GAGLX,GDaJ,SAACA,GACGA,EAASI,EAAa,YACtB7C,IACK4E,MAAK,SAACC,GACCA,EAAIrC,MACJC,EAV+C,CAACuC,KAAM,gBAAiB6B,UAU/ChC,EAAIrC,OAC5BC,EAASI,EAAa,WAEtBJ,EAASG,GAAY,0BACrBH,EAASI,EAAa,WAE9B,IAAGqC,OAAM,SAAAC,GAET4B,MAAM,uBACGtE,EAASG,GAAY,0BACtBH,EAASI,EAAa,UAClC,GAEJ,GC9BA,GAAG,CAACJ,IAEJ,IAAMnB,EAAaM,uBAAY,SAAUxB,EAAYF,GACjD,IH+BwBM,EAAgBD,EG/BlCiD,GH+BkBhD,EG/BOJ,EH+BSG,EG/BLL,EHgCvC,SAACuC,GACGA,EAASI,EAAa,YACtB7C,EAAwBQ,EAAQD,GAC3BqE,MAAK,SAACC,GACyB,IAAxBA,EAAIrC,KAAKsC,YACTrC,EApCyC,CAACuC,KAAM,cAAegC,OAoCjCzG,EApCyCH,GAoCjDI,IACtBiC,EAASI,EAAa,UAEtBN,EAAqBsC,EAAIrC,KAAMC,EAEvC,IAAGyC,OAAM,SAAAC,GACTrC,EAAyBqC,EAAIzC,SAAUD,EAC3C,GACJ,GG5CIA,EAASe,EACb,GAAG,CAACf,IAEErE,EAAUwD,uBAAY,SAAU5D,EAAekC,GACjD,IAAMsD,EHyCc,SAACxF,EAAekC,GAAc,OACtD,SAACuC,EAA2ByB,GACxBzB,EAASI,EAAa,YACtB7C,EAAwBhC,EAAOkC,GAC1B0E,MAAK,SAACC,GACyB,IAAxBA,EAAIrC,KAAKsC,YACTrC,EAlD0B,CAACuC,KAAM,WAAYb,KAkD1BU,EAAIrC,KAAKA,KAAKyE,OACjCxE,EAASI,EAAa,UAEtBN,EAAqBsC,EAAIrC,KAAMC,EAEvC,IAAGyC,OAAM,SAAAgC,GACTpE,EAAyBoE,EAAIxE,SAAUD,EAC3C,GACJ,CAAC,CGvDkB0E,CAAanJ,EAAOkC,GACnCuC,EAASe,EACb,GAAG,CAACf,IAEE2E,EAAexF,uBAAY,SAAUxB,EAAYsB,EAAsBxB,GACzE,IAAMsD,EAASQ,GAAa5D,EAAI,CAACsB,OAAOA,GAASxB,GACjDuC,EAASe,EACb,GAAG,CAACf,IAEEjB,EAAqBI,uBAAY,SAAUxB,EAAY8B,EAAkBhC,GAC3E,IAAMsD,EAASQ,GAAa5D,EAAI,CAACpC,MAAMkE,GAAWhC,GAClDuC,EAASe,EACb,GAAG,CAACf,IAEE4E,EAAezF,uBAAY,SAAUrB,EAAoB7B,GAC3D,IAAM8E,EDrBwB,SAACjD,EAAoB+F,GAAwB,MAAM,CACrFtB,KAAM,kBACNzE,aACA+F,SACH,CCiBsBgB,CAAuB/G,EAAY7B,GAClD+D,EAASe,EACb,GAAG,CAACf,IAGE2D,EAAcxE,uBAAY,SAAUxB,GACtC,IDmB4BF,ECnBtBsD,GDmBsBtD,ECnBOE,EDoBvC,SAACqC,GACGA,EA5DoF,CACxFuC,KAAM,gCACN5E,GA0DwCF,EAzDxCpC,aAyDgD,YAC5C2E,EAASI,EAAa,YACtB7C,EAA0BE,GACrB0E,MAAK,SAAAC,GAC0B,IAAxBA,EAAIrC,KAAKsC,YACTrC,EA5DY,SAACrC,GAAU,MAAM,CAAC4E,KAAM,kBAAmB5E,KAAG,CA4DjDmH,CAAiBrH,IAC1BuC,EAASI,EAAa,UAEtBN,EAAqBsC,EAAIrC,KAAMC,EAEvC,IAAGyC,OAAM,SAAAC,GACTrC,EAAyBqC,EAAIzC,SAAUD,EAC3C,GACJ,GCjCIA,EAASe,EACb,GAAG,CAACf,IAEE+E,EAAc5F,uBAAY,SAAU5D,GACtC,IAAMwF,EDHkB,SAACxF,GAAa,OAC1C,SAACyE,GACGA,EAASI,EAAa,YACtB7C,EAA6BhC,GACxB4G,MAAK,SAAAC,GAC0B,IAAxBA,EAAIrC,KAAKsC,YACTrC,EAzCsC,CAACuC,KAAM,eAAgByC,SAyCtC5C,EAAIrC,KAAKA,KAAKyE,OACrCxE,EAASI,EAAa,UAEtBN,EAAqBsC,EAAIrC,KAAMC,EAEvC,IAAGyC,OAAM,SAAAC,GACL4B,MAAM,eACNtE,EAASI,EAAa,QAE9B,GACJ,CAAC,CCbkB6E,CAAiB1J,GAChCyE,EAASe,EACb,GAAG,CAACf,IAEEoD,EAAsBjE,uBAAY,SAAU5D,EAAeoC,GAC7D,IAAMoD,EDyB0B,SAACxF,EAAeoC,GAAU,OAC9D,SAACqC,GACGA,EAASI,EAAa,YACtB7C,EAA0BhC,EAAOoC,GAC5BwE,MAAK,SAAAC,GACCA,GACApC,EAzEkB,SAACzE,EAAeoC,GAAU,MAAM,CACjE4E,KAAM,wBACNhH,QACAoC,KACH,CAqE2BuH,CAAsB3J,EAAOoC,IACtCqC,EAASI,EAAa,WAEtBJ,EAASG,GAAY,0BACrBH,EAASI,EAAa,WAE7B,IAAGqC,OAAM,WACTpC,EAA0B,CAAEC,QAAS,kBAAkBN,EAC3D,GACJ,CAAC,CCxCkBmF,CAAyB5J,EAAOoC,GAC/CqC,EAASe,EACb,GAAG,CAACf,IAEJ,OAAKW,EAIE,qCACH,cAACyE,EAAA,EAAI,CAACC,WAAS,EAACxJ,MAAO,CAACyJ,QAAS,WAAW,SACxC,cAACrK,EAAe,CAACG,QAAS2J,MAE9B,cAACK,EAAA,EAAI,CAACC,WAAS,EAACE,QAAS,EAAE,SAEnBnB,EAAUJ,KAAI,SAAAwB,GACV,IAAIC,EAAqB9D,EAAM6D,EAAK7H,IACpC,OACQ,cAACyH,EAAA,EAAI,CAACZ,MAAI,WACN,cAACkB,EAAA,EAAK,CAAC7J,MAAO,CAACyJ,QAAS,QAASK,UAAW,EAAE,SAC1C,cAAC/C,GAAQ,CACLvH,aAAcmK,EAAKnK,aACnB+H,oBAAqBA,EACrBrE,mBAAoBA,EACpB4E,YAAaA,EACbZ,WAAYyC,EAAK7H,GACjBmG,cAAe0B,EAAKjK,MACpBoG,MAAO8D,EACP5G,WAAYA,EACZyE,kBAAmBsB,EACnBjJ,QAASA,EACTmD,iBAAkB6F,EAClBd,OAAQ2B,EAAK3B,YAdT2B,EAAK7H,GAmBjC,SA/BD,cAAC,KAAQ,CAACiI,GAAI,UAkC7B,E,UC7GO,SAASC,KACZ,IAAMpK,EAAQ4I,cAA6C,SAAAvD,GAAK,OAAIA,EAAMgF,IAAIrK,KAAK,IAC7EuE,EAAW6C,eASjB,OACI,cAACkD,GAAA,EAAQ,CAACC,OAAQvK,EAAOwK,iBAAkB,IAAMC,QARjC,SAACC,EAA8BC,GAChC,cAAXA,GAGJpG,EAASG,GAAY,MACzB,EAG0E,SAC7D1E,GAGjB,C,qDCVa4K,GAAQ,WACjB,IAAM1F,EAAa0D,cAAgC,SAAAvD,GAAK,OAAIA,EAAMG,YAAYN,UAAU,IAElFX,EAAW6C,eAEXyD,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAACC,GACP,IAAMC,EAA0B,CAAC,EASjC,OARKD,EAAOJ,MAEA,4CAA4CM,KAAKF,EAAOJ,SAChEK,EAAOL,MAAQ,yBAFfK,EAAOL,MAAQ,WAIfI,EAAOH,SAASxG,OAAS,IACzB4G,EAAOJ,SAAW,uBAEfI,CACX,EACAE,SAAU,SAAAH,GPfK,IAAC9G,EOgBZC,GPhBYD,EOgBK8G,EPfzB,SAAC7G,GACGA,EAASI,EAAa,YACtBnC,EAAgB8B,GACXoC,MAAK,SAACC,GACyB,IAAxBA,EAAIrC,KAAKsC,YACTrC,EAASa,EAAc,CAAC5E,OAAM,KAC9B+D,EAASI,EAAa,UAEtBN,EAAqBsC,EAAIrC,KAAMC,EAEvC,IAAGyC,OAAM,SAAAgC,GACTpE,EAAyBoE,EAAIxE,SAAUD,EAC3C,GACR,IOGYsG,EAAOW,WACX,IAGJ,OAAItG,EACO,cAAC,KAAQ,CAACiF,GAAI,MAGlB,cAACR,EAAA,EAAI,CAACC,WAAS,EAAC6B,QAAS,SAAUrL,MAAO,CAACC,UAAW,QAAQ,SACjE,eAACsJ,EAAA,EAAI,CAACZ,MAAI,EAAC2C,GAAI,EAAGC,UAAW,SAAUC,WAAY,SAAS,UACxD,eAACC,GAAA,EAAS,WACN,yDACI,mBAAGC,KAAM,wCACNC,OAAQ,SAAS,qBAGxB,wEACA,0DACA,kDAEJ,sBAAMR,SAAUV,EAAOmB,aAAa,SAChC,cAACC,GAAA,EAAW,UACR,eAACC,GAAA,EAAS,WACN,cAAC3L,EAAA,EAAS,aACNS,MAAM,QACNmL,OAAO,UACHtB,EAAOuB,cAAc,WAG5BvB,EAAOQ,OAAOL,MAAQ,oCAAOH,EAAOQ,OAAOL,SAAe,KAC3D,cAACzK,EAAA,EAAS,aACNS,MAAM,WACNmL,OAAO,UACHtB,EAAOuB,cAAc,cAIzBvB,EAAOwB,QAAQrB,OACfH,EAAOQ,OAAOJ,SAAW,oCAAOJ,EAAOQ,OAAOJ,YAAkB,KAEpE,cAACqB,GAAA,EAAgB,CACbtL,MAAO,cACPuL,QAAS,cAACrI,EAAA,EAAQ,aACdN,QAASiH,EAAOO,OAAOF,YACnBL,EAAOuB,cAAc,kBAGjC,cAAC5D,EAAA,EAAM,CAAC1B,KAAM,SAAUhG,QAAS,YAAaO,MAAO,UAAU,8BAMvF,EClBemL,GAnDH/M,IAAMC,MAAK,WACnB,IAAM8D,EAASoF,cAA0C,SAAAvD,GAAK,OAAIA,EAAMgF,IAAI7G,MAAM,IAC5E0B,EAAa0D,cAAgC,SAAAvD,GAAK,OAAIA,EAAMG,YAAYN,UAAU,IAClFS,EAAgBiD,cAAgC,SAAAvD,GAAK,OAAIA,EAAMgF,IAAI1E,aAAa,IAChF8G,EAAUC,eACVnI,EAAW6C,eAMjB,GAJAC,qBAAU,WACN9C,GPC6B,SAACA,GAClC/B,IAAekE,MAAK,SAAAC,GACY,IAAxBA,EAAIrC,KAAKsC,YACTrC,EAASa,EAAc,CAAC5E,OAAO,IAEvC,IAAGmM,SAAQ,WACPpI,EAASqB,GAAmB,CAACD,eAAe,IAChD,GACJ,GORI,GAAE,KAEGA,EACD,OAAO,qBAAKvF,MAAO,CAACwM,SAAU,QAASC,IAAK,MAAOC,UAAW,SAAUC,MAAO,QAAQ,SACnF,cAACC,EAAA,EAAgB,MAUzB,OAAO,sBAAK7I,UAAU,MAAK,UACnB,cAACiG,GAAa,IACd,eAAC6C,EAAA,EAAM,CAAC7M,MAAO,CAAC8M,WAAY,UAAW7L,MAAO,SAAUuL,SAAS,SAAQ,UACrE,eAACO,EAAA,EAAO,CAAC/M,MAAO,CAACgN,QAAS,OAAQC,eAAgB,iBAAiB,UAC/D,cAAClM,EAAA,EAAU,CAACmM,KAAK,QAAQjM,MAAM,UAAU,aAAW,SAEpD,cAACkM,EAAA,EAAU,CAACzM,QAAQ,KAAI,4BAGxB,cAAC0H,EAAA,EAAM,CAACpH,QAhBH,WACjBqL,EAAQe,KAAK,SACjB,EAcgD1M,QAAS,WAAYO,MAAM,UAAS,mBACnE6D,GAAiB,cAACsD,EAAA,EAAM,CAACpH,QAbxB,WACdmD,GRCsB,SAACA,GAC3BA,EAASI,EAAa,YACtBnC,IACKkE,MAAK,SAAAC,GAC0B,IAAxBA,EAAIrC,KAAKsC,YACTrC,EAASa,EAAc,CAAC5E,OAAM,KAC9B+D,EAASI,EAAa,eAEtBN,EAAqBsC,EAAIrC,KAAMC,EAEvC,IACCyC,OAAM,SAAChH,GACJ4E,EAAyB5E,EAAOuE,EACpC,GACR,GQdA,EAWsEzD,QAAS,WAAYO,MAAM,UAAS,wBAE9E,YAAXmC,GAAwB,cAACiK,EAAA,EAAc,CAACpM,MAAM,iBAEnD,cAACqM,EAAA,EAAS,CAACC,OAAK,WACZ,eAAC,KAAM,WACH,cAAC,KAAK,CAACC,OAAK,EAACC,KAAM,IAAKC,OAAS,kBAAM,cAAC,GAAa,GAAI,IAEzD,cAAC,KAAK,CAAED,KAAM,SAAUC,OAAS,kBAAM,cAAC,GAAK,GAAE,IAE/C,cAAC,KAAK,CAACD,KAAM,OAAQC,OAAS,kBAAM,oDAA4B,IAEhE,cAAC,KAAQ,CAACC,KAAM,IAAM5D,GAAI,gBAI9C,I,kBCxCM6D,GAAcC,aAAgB,CAChC/H,MPzBuB,WAA6D,IAA5Db,EAAK,uDAAGJ,GAAcK,EAAkB,uCAC1D4I,EAAS,eAAO7I,GACtB,OAAQC,EAAOwB,MACX,IAAK,cACD,OAAO,2BAAIzB,GAAK,kBAAGC,EAAOwD,OAASzD,EAAMC,EAAOwD,QAAQV,QAAO,SAAA+F,GAAC,OAAIA,EAAEjM,KAAOoD,EAAOpD,EAAE,MAC1F,IAAK,WACD,OAAO,2BAAImD,GAAK,kBAAGC,EAAOW,KAAKmI,WAAU,CAAI9I,EAAOW,MAAI,mBAAKZ,EAAMC,EAAOW,KAAKmI,gBACnF,IAAK,cACD,OAAO,2BACA/I,GAAK,kBACPC,EAAOtD,OAASqD,EAAMC,EAAOtD,QACzBuG,KAAI,SAAAnC,GAAC,OAAIA,EAAElE,KAAOoD,EAAOhD,OAAM,2BAAO8D,GAAMd,EAAOuB,OAAST,CAAC,MAE1E,IAAK,eACD,OAAO,2BAAIf,GAAK,kBAAGC,EAAOiE,SAASrH,GAAK,KAC5C,IAAK,kBAED,cADOgM,EAAU5I,EAAOpD,IACjBgM,EACX,IAAK,gBACD,OAAO5I,EAAOqD,UAAU0F,QAAO,SAACC,EAAUC,GAEtC,OADAL,EAAUK,EAAIrM,IAAM,GACbgM,CACX,GAAE,eAAK7I,IAKX,IAAK,YACD,OAAO,2BAAIA,GAAK,kBAAGC,EAAOjD,WAAaiD,EAAOY,QAClD,QACI,OAAOb,EAEnB,EONIsD,UL1B2B,WAA0E,IAAzEtD,EAAK,uDAAGJ,GAAcK,EAAkB,uCACpE,OAAQA,EAAOwB,MACX,IAAK,kBACD,OAAOzB,EAAM+C,QAAO,SAAAhC,GAAC,OAAIA,EAAElE,IAAMoD,EAAOpD,EAAE,IAC9C,IAAK,eACD,MAAM,CAAN,2BAAYoD,EAAOiE,UAAQ,IAAEnB,OAAQ,MAAOxI,aAAc,UAAM,mBAAMyF,IAC1E,IAAM,wBACF,OAAOA,EAAMkD,KAAI,SAAAiG,GAAE,OAAIA,EAAGtM,KAAOoD,EAAOpD,GAAE,2BAAOsM,GAAE,IAAE1O,MAAOwF,EAAOxF,QAAS0O,CAAE,IAClF,IAAK,kBACD,OAAenJ,EAAMkD,KAAI,SAAAiG,GAAE,OAAIA,EAAGtM,KAAOoD,EAAOjD,WAAU,2BAAOmM,GAAE,IAAEpG,OAAQ9C,EAAO8C,SAAUoG,CAAE,IACpG,IAAK,gBACD,OAAOlJ,EAAOqD,UAAUJ,KAAI,SAACnC,GAAM,kCAAUA,GAAC,IAAEgC,OAAQ,MAAOxI,aAAc,QAAM,IACvF,IAAK,gCACD,OAAOyF,EAAMkD,KAAI,SAAAiG,GAAE,OAAIA,EAAGtM,KAAOoD,EAAOpD,GAAE,2BAAOsM,GAAE,IAAEpG,OAAQ,MAAOxI,aAAc,YAAa4O,CAAE,IACrG,QACI,OAAOnJ,EAEnB,EKUIgF,IAAKxE,EACLL,YAAaA,IAGJiJ,GAAQC,YAAe,CAChCjJ,QAASuI,GACTW,WAAY,SAACC,GAAoB,OAC7BA,IAAuBC,QAAQC,KAAM,IAQ7C5P,OAAOuP,MAAQA,G,aCzCfM,IAASjB,OACL,cAAC,KAAU,UACP,cAAC,KAAQ,CAACW,MAAOA,GAAM,SACnB,cAAC,GAAG,QAGZO,SAASC,eAAe,ShB4HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1I,MAAK,SAAA2I,GACJA,EAAaC,YACf,IACCtI,OAAM,SAAAhH,GACL4C,QAAQ5C,MAAMA,EAAM6E,QACtB,G","file":"static/js/main.ca10a355.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'dcab931b-e078-48eb-9058-5ff008fbf3d2'\r\n    }\r\n})\r\n\r\n//api\r\nexport const todoListsApi = {\r\n    getTodolists() {\r\n        return instance.get<Array<TodolistType>>('todo-lists')\r\n    },\r\n    delTodoLists(todoId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoId}`)\r\n    },\r\n    updTodoLists(title: string, id: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title})\r\n    },\r\n    createTodoLists(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    getTasks(todolistId:string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(title:string,todolistId:string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title:title})\r\n    },\r\n    updateTask(taskId:string, properties:UpdateTaskModelType, todolistId:string) {\r\n        return instance.put<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, properties) // {properties} не ставить на обновление!!\r\n    },\r\n    deleteTask(id: string, todoId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todoId}/tasks/${id}`)\r\n    },\r\n}\r\nexport const authMeApi = {\r\n    login(dataLogin:LoginParamsType){\r\n        return instance.post<ResponseType<{userId:number}>>('auth/login', dataLogin)\r\n    },\r\n    me(){\r\n        return instance.get<ResponseType<{id:number,login:string,email:string}>>('auth/me')\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\nexport type LoginParamsType = {\r\n    email:string\r\n    password:string\r\n    rememberMe:boolean\r\n    captcha?:string\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksResponse = {\r\n    error: string\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import React, { ChangeEvent, useState, KeyboardEvent, useCallback } from 'react';\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport '../../App/App.css';\r\nimport { AddBox } from '@material-ui/icons';\r\nimport { RequestStatusType } from '../../State/App-reducer';\r\n\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title:string) => void\r\n    entityStatus?:RequestStatusType\r\n}\r\n\r\nexport const AddTodoListForm = React.memo(function({addItem,entityStatus}: AddItemFormType) {\r\n\r\n    const [title, setTitle] = useState('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const textError = 'Title is required'\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError(textError);\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError('')\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addTask();\r\n        }\r\n    }\r\n    return (\r\n        <div style={{ marginTop:'20px',marginBottom: '17px' }}>\r\n            <TextField\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                variant={'outlined'}\r\n                helperText={error}\r\n                label={'Title'}\r\n                size={'small'}\r\n                error={!!error}\r\n                disabled={entityStatus === 'loading'}\r\n            />\r\n            <IconButton\r\n                disabled={entityStatus === 'loading'}\r\n                onClick={addTask}\r\n                color={'primary'}\r\n                size={'small'}>\r\n                <AddBox fontSize={'large'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n\r\n})","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport { Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { TaskStatuses } from '../../Api/TodoListsApi';\r\nimport { EditableSpan } from '../../Components/EditableSpan/EditableSpan';\r\n\r\n\r\nexport type TasksComponentType = {\r\n    todoId: string\r\n    taskId: string\r\n    removeTask: (taskId: string, todoId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoId: string) => void\r\n    changeTaskValueNew: (taskId: string, valueNew: string, todoId: string) => void\r\n    titleEditInput: string\r\n    status: TaskStatuses\r\n}\r\n\r\nexport const Tasks = React.memo(({\r\n                                     todoId,\r\n                                     taskId,\r\n                                     removeTask,\r\n                                     changeTaskStatus,\r\n                                     changeTaskValueNew,\r\n                                     titleEditInput,\r\n                                     status\r\n                                 }: TasksComponentType) => {\r\n\r\n    const onChangeHandlerWrapper = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        const newStatusValue = e.currentTarget.checked\r\n        changeTaskStatus(taskId, newStatusValue ? TaskStatuses.Completed : TaskStatuses.New, todoId)\r\n    }, [changeTaskStatus, taskId, todoId])\r\n\r\n    const onChangeInputValueWrapper = useCallback(function (valueNew: string) {\r\n        changeTaskValueNew(taskId, valueNew, todoId)\r\n    }, [changeTaskValueNew, taskId, todoId])\r\n\r\n    const removeTaskWrapper = useCallback(() => removeTask(taskId, todoId), [removeTask, taskId, todoId])\r\n\r\n    return <>\r\n        <li >\r\n            <Checkbox\r\n                className={status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                checked={status === TaskStatuses.Completed}\r\n                color=\"primary\"\r\n                onChange={onChangeHandlerWrapper}\r\n            />\r\n            <EditableSpan  value={titleEditInput} onChange={onChangeInputValueWrapper}/>\r\n            <IconButton onClick={removeTaskWrapper} size={'small'}>\r\n                <Delete fontSize={'medium'}/>\r\n            </IconButton>\r\n        </li>\r\n    </>\r\n\r\n})","import { ResponseType } from '../Api/TodoListsApi';\r\nimport { setAppError, setAppStatus } from '../State/App-reducer';\r\nimport { AppDispatchType } from '../Store/Store';\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: AppDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppError('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: {message: string}, dispatch: AppDispatchType) => {\r\n    dispatch(setAppError(error.message))\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\n","import { AppDispatchType } from '../Store/Store';\r\nimport { setAppStatus } from './App-reducer';\r\nimport { authMeApi, LoginParamsType } from '../Api/TodoListsApi';\r\nimport { handleServerAppError, handleServerNetworkError } from '../Utils/Error-utils';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\nimport { PayloadAction } from '@reduxjs/toolkit/dist/createAction';\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state: any, action:PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\nexport const authReducer = slice.reducer\r\nexport const { setIsLoggedIn } = slice.actions\r\n// actions\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        authMeApi.login(data)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedIn({value:true}))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(rej => {\r\n            handleServerNetworkError(rej.messages, dispatch)\r\n        })\r\n}\r\nexport const initializeAppTC = () => (dispatch: AppDispatchType) => {\r\n    authMeApi.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn({value:true}));\r\n        } else {\r\n        }\r\n    })\r\n}\r\nexport const logoutTC = () => (dispatch: AppDispatchType) => {\r\n    dispatch(setAppStatus('loading'))\r\n    authMeApi.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({value:false}))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n\r\n","import {ActionType} from '../Store/Store';\r\nimport {setIsLoggedIn} from './authReducer';\r\nimport {Dispatch} from 'redux';\r\nimport {authMeApi} from '../Api/TodoListsApi';\r\nimport {createSlice} from '@reduxjs/toolkit';\r\nimport {PayloadAction} from '@reduxjs/toolkit/dist/createAction';\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype InitialStateType = typeof initialState\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatus(state: any, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state: any, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitializedAC(state: any, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n    }\r\n})\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatus, setAppError, setIsInitializedAC} = slice.actions\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch<ActionType>) => {\r\n    authMeApi.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn({value: true}));\r\n        }\r\n    }).finally(() => {\r\n        dispatch(setIsInitializedAC({isInitialized: true}))\r\n    })\r\n}\r\n","import {ActionType, AppDispatchType, AppRootStateType, RootState} from '../Store/Store';\r\nimport { setAppError, setAppStatus } from './App-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../Utils/Error-utils';\r\nimport { TaskPriorities, TaskStatuses, TaskType, todoListsApi, UpdateTaskModelType } from '../Api/TodoListsApi';\r\n\r\n\r\nconst initialState: TodoTaskType = {}\r\n\r\nexport const taskReducer = (state = initialState, action: ActionType): TodoTaskType => {\r\n    const stateCopy = {...state}\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.idTodo]: state[action.idTodo].filter(f => f.id !== action.id)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todoId]: state[action.todoId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todoList.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.reduce((acc: any, cur: { id: string | number; }) => {\r\n                stateCopy[cur.id] = []\r\n                return stateCopy\r\n            }, {...state})\r\n        /*action.todolists.forEach((tl) => {\r\n            stateCopy[tl.id] = []\r\n        })\r\n        return stateCopy;*/\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action\r\nexport const removeTaskAC = (id: string, idTodo: string) => ({type: 'REMOVE-TASK', idTodo, id} as const)\r\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\r\n    type: 'SET-TASKS',\r\n    tasks,\r\n    todolistId\r\n} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoId: string) =>\r\n    ({type: 'UPDATE-TASK', taskId, model, todoId} as const)\r\n\r\n\r\n//thunk\r\nexport const fetchTasksThunk = (todolistId: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.getTasks(todolistId)\r\n            .then((res) => {\r\n                if (res.data.items) {\r\n                    dispatch(setTasksAC(res.data.items, todolistId))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else if (res.data.error.length) {\r\n                    dispatch(setAppError(res.data.error[0]))\r\n                } else {\r\n                    dispatch(setAppError('Some error occurred'))\r\n                }\r\n                dispatch(setAppStatus('failed'))\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.error, dispatch)\r\n        })\r\n    }\r\nexport const removeTaskThunk = (taskId: string, todolistId: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.deleteTask(taskId, todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTaskAC(taskId, todolistId))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\nexport const addTaskThunk = (title: string, todoId: string) =>\r\n    (dispatch: AppDispatchType, getState: RootState) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.createTask(title, todoId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(rej => {\r\n            handleServerNetworkError(rej.messages, dispatch)\r\n        })\r\n    }\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: AppDispatchType, getState: () => RootState) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find((t: { id: string; }) => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n        dispatch(setAppStatus('loading'))\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n           /* ...domainModel*/\r\n        }\r\n        todoListsApi.updateTask(taskId, apiModel, todolistId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\n\r\n\r\n//types\r\nexport type TodoTaskType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { AddTodoListForm } from '../../Components/AddItemForm/AddTodoListForm';\r\nimport { Button, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { Tasks } from '../Tasks/Tasks';\r\nimport { FilterValuesType } from '../../State/todoList-reducer';\r\nimport { fetchTasksThunk } from '../../State/task-reducer';\r\nimport { useDispatch } from 'react-redux';\r\nimport { RequestStatusType } from '../../State/App-reducer';\r\nimport { TaskStatuses, TaskType } from '../../Api/TodoListsApi';\r\nimport { EditableSpan } from '../../Components/EditableSpan/EditableSpan';\r\n\r\ntype PropsTodoType = {\r\n    titleTodoList: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todoId: string) => void\r\n    changeFilterTasks: (todolistId: string, value: FilterValuesType) => void\r\n    addTask: (title: string, todoId: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoId: string) => void\r\n    changeTaskValueNew: (taskId: string, valueNew: string, todoId: string) => void\r\n    filter: FilterValuesType\r\n    idTodoList: string\r\n    delTodolist: (id: string) => void\r\n    changeTitleTodoList: (newTitle: string, id: string) => void\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsTodoType) {\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(fetchTasksThunk(props.idTodoList))\r\n    }, [dispatch, props.idTodoList])\r\n    const changeTitleValueNewWrapper = useCallback((newTitle: string) => {\r\n        props.changeTitleTodoList(newTitle, props.idTodoList)\r\n    }, [])\r\n\r\n    const onAllClickHandlerWrapper = useCallback(() => props.changeFilterTasks(props.idTodoList, 'all'), [props.changeFilterTasks, props.idTodoList])\r\n\r\n    const onActiveClickHandlerWrapper = useCallback(() => props.changeFilterTasks(props.idTodoList, 'active'), [props.changeFilterTasks, props.idTodoList])\r\n\r\n    const onCompletedClickHandlerWrapper = useCallback(() => props.changeFilterTasks(props.idTodoList, 'completed'), [props.changeFilterTasks, props.idTodoList])\r\n\r\n    const addTaskWrapper = useCallback((title: string) => {\r\n        props.addTask(title, props.idTodoList)\r\n    }, [props.addTask, props.idTodoList])\r\n\r\n    const deleteTodoListWrapper = useCallback(() => {\r\n        props.delTodolist(props.idTodoList)\r\n    }, [props.delTodolist, props.idTodoList])\r\n\r\n    let tasksForTodolist = props.tasks\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    return <div>\r\n        <h3>\r\n            <IconButton disabled={props.entityStatus === 'loading'} onClick={deleteTodoListWrapper}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <EditableSpan value={props.titleTodoList} onChange={changeTitleValueNewWrapper}/>\r\n        </h3>\r\n        <AddTodoListForm entityStatus={props.entityStatus} addItem={addTaskWrapper}/>\r\n        <ul style={{listStyle: 'none'}}>\r\n            {\r\n                tasksForTodolist.map(t => {\r\n                    return <div key={t.id}>\r\n                        <Tasks removeTask={props.removeTask} todoId={props.idTodoList}\r\n                               changeTaskStatus={props.changeTaskStatus}\r\n                               changeTaskValueNew={props.changeTaskValueNew}\r\n                               titleEditInput={t.title}\r\n                               taskId={t.id}\r\n                               status={t.status}/>\r\n                    </div>\r\n                })\r\n            }\r\n        </ul>\r\n        <div>\r\n            <Button\r\n                style={{backgroundColor: 'red'}}\r\n                size={'medium'}\r\n                variant={props.filter === 'all' ? 'outlined' : 'contained'}\r\n                onClick={onAllClickHandlerWrapper}>All</Button>\r\n            <Button\r\n                variant={props.filter === 'active' ? 'outlined' : 'contained'}\r\n                onClick={onActiveClickHandlerWrapper}>Active</Button>\r\n            <Button\r\n                variant={props.filter === 'completed' ? 'outlined' : 'contained'}\r\n                onClick={onCompletedClickHandlerWrapper}>Completed</Button>\r\n        </div>\r\n    </div>\r\n})\r\n","import { todoListsApi, TodolistType } from '../Api/TodoListsApi';\r\nimport { ActionType, AppDispatchType } from '../Store/Store';\r\nimport { RequestStatusType, setAppError, setAppStatus } from './App-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../Utils/Error-utils';\r\n\r\n\r\nlet initialState: Array<TodoListDomainType> = []\r\n\r\nexport const todoListReducer = (state = initialState, action: ActionType): Array<TodoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todoList, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case  'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'FILTER-TODOLIST':\r\n            return state = state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map((t: any) => ({...t, filter: 'all', entityStatus: 'idle'}))\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: 'all', entityStatus: 'loading'} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n//action\r\nexport const changeTodolistEntityStatus = (id: string, entityStatus: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\r\n    id,\r\n    entityStatus\r\n} as const)\r\nexport const daleteTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todoList: TodolistType) => ({type: 'ADD-TODOLIST', todoList} as const)\r\nexport const updateTodoListTitleAC = (title: string, id: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    title,\r\n    id\r\n} as const)\r\nexport const changeTodoListFilterAC = (todolistId: string, filter: FilterValuesType) => ({\r\n    type: 'FILTER-TODOLIST',\r\n    todolistId,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n\r\n/// thunk\r\nexport const setTodoListsThunk = () =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.getTodolists()\r\n            .then((res) => {\r\n                if (res.data) {\r\n                    dispatch(setTodolistsAC(res.data))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    dispatch(setAppError('TodoList is not found'))\r\n                    dispatch(setAppStatus('failed'))\r\n                }\r\n            }).catch(err => {\r\n            /*handleServerNetworkError(err.messages, dispatch)*/\r\n            alert('error set todoLists')\r\n                     dispatch(setAppError('TodoList is not found'))\r\n                    dispatch(setAppStatus('failed'))\r\n        })\r\n        \r\n    }\r\nexport const addTodoListThunk = (title: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.createTodoLists(title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(err => {\r\n                alert('fail reqest')\r\n                dispatch(setAppStatus('idle'))\r\n           // handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\nexport const deleteTodoListThunk = (todoId: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(changeTodolistEntityStatus(todoId, 'loading'))\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.delTodoLists(todoId)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(daleteTodolistAC(todoId))\r\n                    dispatch(setAppStatus('idle'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            }).catch(err => {\r\n            handleServerNetworkError(err.messages, dispatch)\r\n        })\r\n    }\r\nexport const updateTodoListTitleThunk = (title: string, id: string) =>\r\n    (dispatch: AppDispatchType) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListsApi.updTodoLists(title, id)\r\n            .then(res => {\r\n               if (res){\r\n                   dispatch(updateTodoListTitleAC(title, id))\r\n                   dispatch(setAppStatus('idle'))\r\n               }else {\r\n                   dispatch(setAppError('TodoList is not found'))\r\n                   dispatch(setAppStatus('failed'))\r\n               }\r\n            }).catch(() => {\r\n            handleServerNetworkError( { message: 'Error Net Work'},dispatch)\r\n        })\r\n    }\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}","import React, { useCallback, useEffect } from 'react';\r\nimport { Grid, Paper } from '@material-ui/core';\r\nimport { Todolist } from '../TodoList/Todolist';\r\nimport {\r\n    addTodoListThunk,\r\n    changeTodoListFilterAC,\r\n    deleteTodoListThunk,\r\n    FilterValuesType,\r\n    setTodoListsThunk,\r\n    TodoListDomainType,\r\n    updateTodoListTitleThunk\r\n} from '../../State/todoList-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {AppRootStateType, RootState} from '../../Store/Store';\r\nimport { addTaskThunk, removeTaskThunk, TodoTaskType, updateTaskTC } from '../../State/task-reducer';\r\nimport { AddTodoListForm } from '../../Components/AddItemForm/AddTodoListForm';\r\nimport { TaskStatuses } from '../../Api/TodoListsApi';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\ntype TodoListsListType = {\r\n\r\n}\r\n\r\n\r\nexport const TodoListsList: React.FC<TodoListsListType> = (props) => {\r\n    const todolists = useSelector<RootState, TodoListDomainType[]>(state => state.todolists)\r\n\r\n    const tasks = useSelector<RootState, TodoTaskType>(state => state.tasks)\r\n\r\n    const isLoggedIn = useSelector<RootState, boolean>(state => state.authReducer.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isLoggedIn){\r\n            return\r\n        }\r\n        dispatch(setTodoListsThunk())\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todoId: string) {\r\n        const action = removeTaskThunk(id, todoId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todoId: string) {\r\n        const action = addTaskThunk(title, todoId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todoId: string) {\r\n        const action = updateTaskTC(id, {status:status}, todoId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskValueNew = useCallback(function (id: string, valueNew: string, todoId: string) {\r\n        const action = updateTaskTC(id, {title:valueNew}, todoId)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (todolistId: string, value: FilterValuesType) {\r\n        const action = changeTodoListFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n/////////////////////////////////\r\n    const delTodolist = useCallback(function (id: string) {\r\n        const action = deleteTodoListThunk(id)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const addTodoList = useCallback(function (title: string) {\r\n        const action = addTodoListThunk(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTitleTodoList = useCallback(function (title: string, id: string) {\r\n        const action = updateTodoListTitleThunk(title, id)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn){\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px, 0'}}>\r\n            <AddTodoListForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(todo => {\r\n                    let allTaskForTodoList = tasks[todo.id]\r\n                    return (\r\n                            <Grid item key={todo.id}>\r\n                                <Paper style={{padding: '20px'}} elevation={5}>\r\n                                    <Todolist\r\n                                        entityStatus={todo.entityStatus}\r\n                                        changeTitleTodoList={changeTitleTodoList}\r\n                                        changeTaskValueNew={changeTaskValueNew}\r\n                                        delTodolist={delTodolist}\r\n                                        idTodoList={todo.id}\r\n                                        titleTodoList={todo.title}\r\n                                        tasks={allTaskForTodoList}\r\n                                        removeTask={removeTask}\r\n                                        changeFilterTasks={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={todo.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                    )\r\n                })}\r\n        </Grid>\r\n    </>\r\n};\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from '../../Store/Store';\r\nimport { setAppError } from '../../State/App-reducer';\r\n\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppError(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n                {error}\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from '../../State/authReducer';\r\nimport {AppRootStateType, RootState} from '../../Store/Store';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useSelector<RootState, boolean>(state => state.authReducer.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (values.password.length < 3) {\r\n                errors.password = 'Pole to be 3 symbol';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n            formik.resetForm()\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify={'center'} style={{marginTop: \"60px\"}}>\r\n        <Grid item xs={4} direction={'column'} alignItems={'center'}>\r\n            <FormLabel>\r\n                <p>To log in get registered\r\n                    <a href={'https://social-network.samuraijs.com/'}\r\n                       target={'_blank'}>here\r\n                    </a>\r\n                </p>\r\n                <p>or use common test account credentials:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            </FormLabel>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n\r\n                        />\r\n                        {formik.errors.email ? <div> {formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n\r\n                        />\r\n                        {\r\n                            formik.touched.email &&\r\n                            formik.errors.password ? <div> {formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                checked={formik.values.rememberMe}\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'; // тянет всю библиотеку, разбить на ипорты!!!!\r\nimport { TodoListsList } from '../Pages/TodoListsList/TodoListsList';\r\nimport {AppRootStateType, RootState} from '../Store/Store';\r\nimport { initializeAppTC, RequestStatusType } from '../State/App-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ErrorSnackbar } from '../Components/ErrorSnackBar/ErrorSnackBar';\r\nimport { Login } from '../Pages/Login/Login';\r\nimport { Redirect, Route, Switch,useHistory  } from 'react-router-dom';\r\nimport { logoutTC } from '../State/authReducer';\r\n\r\n\r\n\r\nconst App = React.memo(function () {\r\n    const status = useSelector<RootState, RequestStatusType>(state => state.app.status)\r\n    const isLoggedIn = useSelector<RootState, boolean>(state => state.authReducer.isLoggedIn)\r\n    const isInitialized = useSelector<RootState, boolean>(state => state.app.isInitialized)\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    },[])\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n    const loginHandler = () => {\r\n        history.push('/login')\r\n    }\r\n\r\nconst logOutHandler = () =>{\r\n        dispatch(logoutTC())\r\n}\r\n    return <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar style={{background: '#3F5172', color: 'white'}} position=\"static\">\r\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        MY TODOLIST :)\r\n                    </Typography>\r\n                    <Button onClick={loginHandler}  variant={'outlined'} color=\"inherit\">Login</Button>\r\n                    {isLoggedIn  &&   <Button onClick={logOutHandler} variant={'outlined'} color=\"inherit\">Log-Out</Button> }\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={ () => <TodoListsList  />}/>\r\n\r\n                    <Route  path={'/login'} render={ () => <Login/>}/>\r\n\r\n                    <Route path={'/404'} render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n\r\n                    <Redirect from={'*'}  to={'/404'} />\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n})\r\n\r\nexport default App;\r\n","import { combineReducers, Dispatch } from 'redux';\r\nimport { addTaskAC, removeTaskAC, setTasksAC, taskReducer, updateTaskAC } from '../State/task-reducer';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistEntityStatus,\r\n    changeTodoListFilterAC,\r\n    daleteTodolistAC,\r\n    setTodolistsAC,\r\n    todoListReducer,\r\n    updateTodoListTitleAC\r\n} from '../State/todoList-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport { appReducer, setAppError, setAppStatus, setIsInitializedAC } from '../State/App-reducer';\r\nimport { authReducer, setIsLoggedIn } from '../State/authReducer';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nexport type ActionType =\r\n    | ReturnType<typeof setIsLoggedIn>\r\n    | ReturnType<typeof daleteTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof updateTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof changeTodolistEntityStatus>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof setIsInitializedAC>\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists: todoListReducer,\r\n    app: appReducer,\r\n    authReducer: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n/*export const store = createStore(rootReducer, applyMiddleware(thunk));*/\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatchType = Dispatch<ActionType>\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App/App';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './Store/Store';\r\nimport {HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}